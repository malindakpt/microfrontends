type Application {
  id: UUID!
  name: String!
  allowedOrigins: [String]
  interimAdministratorEmail: String!
  enabled: Boolean!
  tenantId: UUID!
  createdAt: Datetime!
  createdBy: String!
  updatedAt: Datetime!
  updatedBy: String!

  """Reads and enables pagination through a set of `IdpConfiguration`."""
  idpConfigurations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IdpConfiguration`."""
    orderBy: [IdpConfigurationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdpConfigurationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdpConfigurationFilter
  ): IdpConfigurationsConnection!
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `allowedOrigins` field."""
  allowedOrigins: [String]

  """
  Checks for equality with the object’s `interimAdministratorEmail` field.
  """
  interimAdministratorEmail: String

  """Checks for equality with the object’s `enabled` field."""
  enabled: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""
A filter to be used against `Application` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `allowedOrigins` field."""
  allowedOrigins: StringListFilter

  """Filter by the object’s `interimAdministratorEmail` field."""
  interimAdministratorEmail: StringFilter

  """Filter by the object’s `enabled` field."""
  enabled: BooleanFilter

  """Filter by the object’s `tenantId` field."""
  tenantId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: StringFilter

  """Filter by the object’s `idpConfigurations` relation."""
  idpConfigurations: ApplicationToManyIdpConfigurationFilter

  """Some related `idpConfigurations` exist."""
  idpConfigurationsExist: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationFilter!]

  """Negates the expression."""
  not: ApplicationFilter
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  name: String!
  allowedOrigins: [String]
  interimAdministratorEmail: String!
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  name: String
  allowedOrigins: [String]
  interimAdministratorEmail: String
  enabled: Boolean
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ALLOWED_ORIGINS_ASC
  ALLOWED_ORIGINS_DESC
  INTERIM_ADMINISTRATOR_EMAIL_ASC
  INTERIM_ADMINISTRATOR_EMAIL_DESC
  ENABLED_ASC
  ENABLED_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against many `IdpConfiguration` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyIdpConfigurationFilter {
  """
  Every related `IdpConfiguration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: IdpConfigurationFilter

  """
  Some related `IdpConfiguration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: IdpConfigurationFilter

  """
  No related `IdpConfiguration` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: IdpConfigurationFilter
}

input AuthenticateTenantAdminInput {
  tenantId: UUID!
  email: String!
  password: String!
}

type AuthenticateTenantAdminPayload {
  """Name of the Tenant"""
  tenantName: String!

  """Name of the Tenant Administrator"""
  tenantAdminName: String!

  """Access Token containing permissions of the Tenant Admin"""
  accessToken: String!

  """Access Token type to use when making client requests"""
  tokenType: String!

  """Access Token expiration timeout"""
  expiresIn: Int!

  """System generated password has been changed"""
  passwordChanged: Boolean!
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

input ChangeTenantAdminPasswordInput {
  password: String!
  newPassword: String!
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Application` to be created by this mutation."""
  application: ApplicationInput!
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was created by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the create `IdpConfiguration` mutation."""
input CreateIdpConfigurationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `IdpConfiguration` to be created by this mutation."""
  idpConfiguration: IdpConfigurationInput!
}

"""The output of our create `IdpConfiguration` mutation."""
type CreateIdpConfigurationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IdpConfiguration` that was created by this mutation."""
  idpConfiguration: IdpConfiguration

  """
  Reads a single `Application` that is related to this `IdpConfiguration`.
  """
  application: Application

  """An edge for our `IdpConfiguration`. May be used by Relay 1."""
  idpConfigurationEdge(
    """The method to use when ordering `IdpConfiguration`."""
    orderBy: [IdpConfigurationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdpConfigurationsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was deleted by this mutation."""
  application: Application
  deletedApplicationNodeId: ID

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `deleteIdpConfiguration` mutation."""
input DeleteIdpConfigurationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `IdpConfiguration` mutation."""
type DeleteIdpConfigurationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IdpConfiguration` that was deleted by this mutation."""
  idpConfiguration: IdpConfiguration
  deletedIdpConfigurationNodeId: ID

  """
  Reads a single `Application` that is related to this `IdpConfiguration`.
  """
  application: Application

  """An edge for our `IdpConfiguration`. May be used by Relay 1."""
  idpConfigurationEdge(
    """The method to use when ordering `IdpConfiguration`."""
    orderBy: [IdpConfigurationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdpConfigurationsEdge
}

enum IdentityProvider {
  AZURE_AD
  AX_AUTH
  GOOGLE
}

"""
A filter to be used against IdentityProvider fields. All fields are combined with a logical ‘and.’
"""
input IdentityProviderFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: IdentityProvider

  """Not equal to the specified value."""
  notEqualTo: IdentityProvider

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: IdentityProvider

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: IdentityProvider

  """Included in the specified list."""
  in: [IdentityProvider!]

  """Not included in the specified list."""
  notIn: [IdentityProvider!]

  """Less than the specified value."""
  lessThan: IdentityProvider

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: IdentityProvider

  """Greater than the specified value."""
  greaterThan: IdentityProvider

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: IdentityProvider
}

type IdpConfiguration {
  id: UUID!
  idpId: IdentityProvider!
  discoveryDocumentUrl: String!
  clientId: String!
  clientSecret: String!
  scopes: [String]!
  enabled: Boolean!
  tenantId: UUID!
  applicationId: UUID!
  createdAt: Datetime!
  createdBy: String!
  updatedAt: Datetime!
  updatedBy: String!

  """
  Reads a single `Application` that is related to this `IdpConfiguration`.
  """
  application: Application
}

"""
A condition to be used against `IdpConfiguration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input IdpConfigurationCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `idpId` field."""
  idpId: IdentityProvider

  """Checks for equality with the object’s `discoveryDocumentUrl` field."""
  discoveryDocumentUrl: String

  """Checks for equality with the object’s `clientId` field."""
  clientId: String

  """Checks for equality with the object’s `clientSecret` field."""
  clientSecret: String

  """Checks for equality with the object’s `scopes` field."""
  scopes: [String]

  """Checks for equality with the object’s `enabled` field."""
  enabled: Boolean

  """Checks for equality with the object’s `tenantId` field."""
  tenantId: UUID

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: String
}

"""
A filter to be used against `IdpConfiguration` object types. All fields are combined with a logical ‘and.’
"""
input IdpConfigurationFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `idpId` field."""
  idpId: IdentityProviderFilter

  """Filter by the object’s `discoveryDocumentUrl` field."""
  discoveryDocumentUrl: StringFilter

  """Filter by the object’s `clientId` field."""
  clientId: StringFilter

  """Filter by the object’s `clientSecret` field."""
  clientSecret: StringFilter

  """Filter by the object’s `scopes` field."""
  scopes: StringListFilter

  """Filter by the object’s `enabled` field."""
  enabled: BooleanFilter

  """Filter by the object’s `tenantId` field."""
  tenantId: UUIDFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: StringFilter

  """Filter by the object’s `application` relation."""
  application: ApplicationFilter

  """Checks for all expressions in this list."""
  and: [IdpConfigurationFilter!]

  """Checks for any expressions in this list."""
  or: [IdpConfigurationFilter!]

  """Negates the expression."""
  not: IdpConfigurationFilter
}

"""An input for mutations affecting `IdpConfiguration`"""
input IdpConfigurationInput {
  idpId: IdentityProvider!
  discoveryDocumentUrl: String!
  clientId: String!
  clientSecret: String!
  scopes: [String]!
  applicationId: UUID!
}

"""
Represents an update to a `IdpConfiguration`. Fields that are set will be updated.
"""
input IdpConfigurationPatch {
  discoveryDocumentUrl: String
  clientId: String
  clientSecret: String
  scopes: [String]
  enabled: Boolean
}

"""A connection to a list of `IdpConfiguration` values."""
type IdpConfigurationsConnection {
  """A list of `IdpConfiguration` objects."""
  nodes: [IdpConfiguration]!

  """
  A list of edges which contains the `IdpConfiguration` and cursor to aid in pagination.
  """
  edges: [IdpConfigurationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `IdpConfiguration` you could get from the connection.
  """
  totalCount: Int!
}

"""A `IdpConfiguration` edge in the connection."""
type IdpConfigurationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IdpConfiguration` at the end of the edge."""
  node: IdpConfiguration
}

"""Methods to use when ordering `IdpConfiguration`."""
enum IdpConfigurationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  IDP_ID_ASC
  IDP_ID_DESC
  DISCOVERY_DOCUMENT_URL_ASC
  DISCOVERY_DOCUMENT_URL_DESC
  CLIENT_ID_ASC
  CLIENT_ID_DESC
  CLIENT_SECRET_ASC
  CLIENT_SECRET_DESC
  SCOPES_ASC
  SCOPES_DESC
  ENABLED_ASC
  ENABLED_DESC
  TENANT_ID_ASC
  TENANT_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type IdpScope {
  id: UUID!
  idpId: IdentityProvider!
  scopeName: String!
  required: Boolean!
}

"""
A condition to be used against `IdpScope` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input IdpScopeCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `idpId` field."""
  idpId: IdentityProvider

  """Checks for equality with the object’s `scopeName` field."""
  scopeName: String

  """Checks for equality with the object’s `required` field."""
  required: Boolean
}

"""
A filter to be used against `IdpScope` object types. All fields are combined with a logical ‘and.’
"""
input IdpScopeFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `idpId` field."""
  idpId: IdentityProviderFilter

  """Filter by the object’s `scopeName` field."""
  scopeName: StringFilter

  """Filter by the object’s `required` field."""
  required: BooleanFilter

  """Checks for all expressions in this list."""
  and: [IdpScopeFilter!]

  """Checks for any expressions in this list."""
  or: [IdpScopeFilter!]

  """Negates the expression."""
  not: IdpScopeFilter
}

"""A connection to a list of `IdpScope` values."""
type IdpScopesConnection {
  """A list of `IdpScope` objects."""
  nodes: [IdpScope]!

  """
  A list of edges which contains the `IdpScope` and cursor to aid in pagination.
  """
  edges: [IdpScopesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `IdpScope` you could get from the connection."""
  totalCount: Int!
}

"""A `IdpScope` edge in the connection."""
type IdpScopesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IdpScope` at the end of the edge."""
  node: IdpScope
}

"""Methods to use when ordering `IdpScope`."""
enum IdpScopesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  IDP_ID_ASC
  IDP_ID_DESC
  SCOPE_NAME_ASC
  SCOPE_NAME_DESC
  REQUIRED_ASC
  REQUIRED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload

  """Creates a single `IdpConfiguration`."""
  createIdpConfiguration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIdpConfigurationInput!
  ): CreateIdpConfigurationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `IdpConfiguration` using a unique key and a patch."""
  updateIdpConfiguration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIdpConfigurationInput!
  ): UpdateIdpConfigurationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `IdpConfiguration` using a unique key."""
  deleteIdpConfiguration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIdpConfigurationInput!
  ): DeleteIdpConfigurationPayload

  """Authenticates a Identity Service Tenant Admin"""
  authenticateTenantAdmin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateTenantAdminInput
  ): AuthenticateTenantAdminPayload!

  """Change password of a Identity Service Tenant Admin"""
  changeTenantAdminPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangeTenantAdminPasswordInput
  ): AuthenticateTenantAdminPayload!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads and enables pagination through a set of `Application`."""
  applications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `IdpConfiguration`."""
  idpConfigurations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IdpConfiguration`."""
    orderBy: [IdpConfigurationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdpConfigurationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdpConfigurationFilter
  ): IdpConfigurationsConnection

  """Reads and enables pagination through a set of `IdpScope`."""
  idpScopes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IdpScope`."""
    orderBy: [IdpScopesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdpScopeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IdpScopeFilter
  ): IdpScopesConnection
  application(id: UUID!): Application
  idpConfiguration(id: UUID!): IdpConfiguration
  idpScope(id: UUID!): IdpScope
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  patch: ApplicationPatch!
  id: UUID!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `updateIdpConfiguration` mutation."""
input UpdateIdpConfigurationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `IdpConfiguration` being updated.
  """
  patch: IdpConfigurationPatch!
  id: UUID!
}

"""The output of our update `IdpConfiguration` mutation."""
type UpdateIdpConfigurationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IdpConfiguration` that was updated by this mutation."""
  idpConfiguration: IdpConfiguration

  """
  Reads a single `Application` that is related to this `IdpConfiguration`.
  """
  application: Application

  """An edge for our `IdpConfiguration`. May be used by Relay 1."""
  idpConfigurationEdge(
    """The method to use when ordering `IdpConfiguration`."""
    orderBy: [IdpConfigurationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): IdpConfigurationsEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}
