"""@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN"""
type AutomaticCollectionsFilter implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  collectionId: Int!
  entityType: CollectionEntity!
  filterKey: String!
  filterValue: String

  """
  Reads a single `Collection` that is related to this `AutomaticCollectionsFilter`.
  """
  collection: Collection
}

"""
A condition to be used against `AutomaticCollectionsFilter` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input AutomaticCollectionsFilterCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """Checks for equality with the object’s `entityType` field."""
  entityType: CollectionEntity

  """
  Checks for equality with the object’s `filterKey` field.
  @notEmpty()
  """
  filterKey: String

  """Checks for equality with the object’s `filterValue` field."""
  filterValue: String
}

"""
A filter to be used against `AutomaticCollectionsFilter` object types. All fields are combined with a logical ‘and.’
"""
input AutomaticCollectionsFilterFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `entityType` field."""
  entityType: CollectionEntityFilter

  """Filter by the object’s `filterKey` field."""
  filterKey: StringFilter

  """Filter by the object’s `filterValue` field."""
  filterValue: StringFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Checks for all expressions in this list."""
  and: [AutomaticCollectionsFilterFilter!]

  """Checks for any expressions in this list."""
  or: [AutomaticCollectionsFilterFilter!]

  """Negates the expression."""
  not: AutomaticCollectionsFilterFilter
}

"""An input for mutations affecting `AutomaticCollectionsFilter`"""
input AutomaticCollectionsFilterInput {
  id: Int
  collectionId: Int!
  entityType: CollectionEntity!

  """@notEmpty()"""
  filterKey: String!
  filterValue: String
}

"""
Represents an update to a `AutomaticCollectionsFilter`. Fields that are set will be updated.
"""
input AutomaticCollectionsFilterPatch {
  id: Int
  collectionId: Int
  entityType: CollectionEntity

  """@notEmpty()"""
  filterKey: String
  filterValue: String
}

"""
A connection to a list of `AutomaticCollectionsFilter` values.
@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN
"""
type AutomaticCollectionsFiltersConnection {
  """A list of `AutomaticCollectionsFilter` objects."""
  nodes: [AutomaticCollectionsFilter]!

  """
  A list of edges which contains the `AutomaticCollectionsFilter` and cursor to aid in pagination.
  """
  edges: [AutomaticCollectionsFiltersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AutomaticCollectionsFilter` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AutomaticCollectionsFilter` edge in the connection."""
type AutomaticCollectionsFiltersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AutomaticCollectionsFilter` at the end of the edge."""
  node: AutomaticCollectionsFilter
}

"""Methods to use when ordering `AutomaticCollectionsFilter`."""
enum AutomaticCollectionsFiltersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  ENTITY_TYPE_ASC
  ENTITY_TYPE_DESC
  FILTER_KEY_ASC
  FILTER_KEY_DESC
  FILTER_VALUE_ASC
  FILTER_VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN"""
type Collection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  externalId: String
  synopsis: String
  description: String
  collectionType: CollectionType
  automaticCollectionSortKey: String
  publishStatus: PublishStatus
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """
  Reads and enables pagination through a set of `AutomaticCollectionsFilter`.
  """
  automaticCollectionsFilters(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AutomaticCollectionsFilter`."""
    orderBy: [AutomaticCollectionsFiltersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AutomaticCollectionsFilterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AutomaticCollectionsFilterFilter
  ): AutomaticCollectionsFiltersConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!

  """Reads and enables pagination through a set of `CollectionsTag`."""
  collectionsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsTagFilter
  ): CollectionsTagsConnection!

  """Reads and enables pagination through a set of `CollectionsImage`."""
  collectionsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsImageFilter
  ): CollectionsImagesConnection!
}

"""
A condition to be used against `Collection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CollectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `collectionType` field."""
  collectionType: CollectionType

  """
  Checks for equality with the object’s `automaticCollectionSortKey` field.
  """
  automaticCollectionSortKey: String

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

enum CollectionEntity {
  MOVIE
  TVSHOW
  SEASON
  EPISODE
}

"""
A filter to be used against CollectionEntity fields. All fields are combined with a logical ‘and.’
"""
input CollectionEntityFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: CollectionEntity

  """Not equal to the specified value."""
  notEqualTo: CollectionEntity

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CollectionEntity

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CollectionEntity

  """Included in the specified list."""
  in: [CollectionEntity!]

  """Not included in the specified list."""
  notIn: [CollectionEntity!]

  """Less than the specified value."""
  lessThan: CollectionEntity

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CollectionEntity

  """Greater than the specified value."""
  greaterThan: CollectionEntity

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CollectionEntity
}

"""
A filter to be used against `Collection` object types. All fields are combined with a logical ‘and.’
"""
input CollectionFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `collectionType` field."""
  collectionType: CollectionTypeFilter

  """Filter by the object’s `automaticCollectionSortKey` field."""
  automaticCollectionSortKey: StringFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `automaticCollectionsFilters` relation."""
  automaticCollectionsFilters: CollectionToManyAutomaticCollectionsFilterFilter

  """Some related `automaticCollectionsFilters` exist."""
  automaticCollectionsFiltersExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: CollectionToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `collectionsTags` relation."""
  collectionsTags: CollectionToManyCollectionsTagFilter

  """Some related `collectionsTags` exist."""
  collectionsTagsExist: Boolean

  """Filter by the object’s `collectionsImages` relation."""
  collectionsImages: CollectionToManyCollectionsImageFilter

  """Some related `collectionsImages` exist."""
  collectionsImagesExist: Boolean

  """Checks for all expressions in this list."""
  and: [CollectionFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionFilter!]

  """Negates the expression."""
  not: CollectionFilter
}

enum CollectionImageType {
  COVER
  TEASER
}

"""
A filter to be used against CollectionImageType fields. All fields are combined with a logical ‘and.’
"""
input CollectionImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: CollectionImageType

  """Not equal to the specified value."""
  notEqualTo: CollectionImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CollectionImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CollectionImageType

  """Included in the specified list."""
  in: [CollectionImageType!]

  """Not included in the specified list."""
  notIn: [CollectionImageType!]

  """Less than the specified value."""
  lessThan: CollectionImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CollectionImageType

  """Greater than the specified value."""
  greaterThan: CollectionImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CollectionImageType
}

"""An input for mutations affecting `Collection`"""
input CollectionInput {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  synopsis: String
  description: String
  collectionType: CollectionType
  automaticCollectionSortKey: String
}

"""
Represents an update to a `Collection`. Fields that are set will be updated.
"""
input CollectionPatch {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  synopsis: String
  description: String
  collectionType: CollectionType
  automaticCollectionSortKey: String
  publishStatus: PublishStatus
}

"""@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN"""
type CollectionRelation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  collectionId: Int!
  sortOrder: Int!
  movieId: Int
  tvshowId: Int
  seasonId: Int
  episodeId: Int

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode
}

"""
A condition to be used against `CollectionRelation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionRelationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """Checks for equality with the object’s `sortOrder` field."""
  sortOrder: Int

  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int
}

"""
A filter to be used against `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input CollectionRelationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `sortOrder` field."""
  sortOrder: IntFilter

  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """A related `movie` exists."""
  movieExists: Boolean

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """A related `tvshow` exists."""
  tvshowExists: Boolean

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """A related `season` exists."""
  seasonExists: Boolean

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """A related `episode` exists."""
  episodeExists: Boolean

  """Checks for all expressions in this list."""
  and: [CollectionRelationFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionRelationFilter!]

  """Negates the expression."""
  not: CollectionRelationFilter
}

"""An input for mutations affecting `CollectionRelation`"""
input CollectionRelationInput {
  id: Int
  collectionId: Int!
  sortOrder: Int!
  movieId: Int
  tvshowId: Int
  seasonId: Int
  episodeId: Int
}

"""
Represents an update to a `CollectionRelation`. Fields that are set will be updated.
"""
input CollectionRelationPatch {
  collectionId: Int
  sortOrder: Int
  movieId: Int
  tvshowId: Int
  seasonId: Int
  episodeId: Int
}

"""
A connection to a list of `CollectionRelation` values.
@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN
"""
type CollectionRelationsConnection {
  """A list of `CollectionRelation` objects."""
  nodes: [CollectionRelation]!

  """
  A list of edges which contains the `CollectionRelation` and cursor to aid in pagination.
  """
  edges: [CollectionRelationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionRelation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CollectionRelation` edge in the connection."""
type CollectionRelationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionRelation` at the end of the edge."""
  node: CollectionRelation
}

"""Methods to use when ordering `CollectionRelation`."""
enum CollectionRelationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  SORT_ORDER_ASC
  SORT_ORDER_DESC
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  SEASON_ID_ASC
  SEASON_ID_DESC
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `Collection` values.
@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN
"""
type CollectionsConnection {
  """A list of `Collection` objects."""
  nodes: [Collection]!

  """
  A list of edges which contains the `Collection` and cursor to aid in pagination.
  """
  edges: [CollectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Collection` you could get from the connection."""
  totalCount: Int!
}

"""A `Collection` edge in the connection."""
type CollectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Collection` at the end of the edge."""
  node: Collection
}

"""@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN"""
type CollectionsImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  collectionId: Int!
  imageId: Int!
  imageType: CollectionImageType!

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection
}

"""
A condition to be used against `CollectionsImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionsImageCondition {
  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `imageType` field."""
  imageType: CollectionImageType
}

"""
A filter to be used against `CollectionsImage` object types. All fields are combined with a logical ‘and.’
"""
input CollectionsImageFilter {
  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Filter by the object’s `imageType` field."""
  imageType: CollectionImageTypeFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Checks for all expressions in this list."""
  and: [CollectionsImageFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionsImageFilter!]

  """Negates the expression."""
  not: CollectionsImageFilter
}

"""An input for mutations affecting `CollectionsImage`"""
input CollectionsImageInput {
  collectionId: Int!
  imageId: Int!
  imageType: CollectionImageType!
}

"""
Represents an update to a `CollectionsImage`. Fields that are set will be updated.
"""
input CollectionsImagePatch {
  collectionId: Int
  imageId: Int
  imageType: CollectionImageType
}

"""
A connection to a list of `CollectionsImage` values.
@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN
"""
type CollectionsImagesConnection {
  """A list of `CollectionsImage` objects."""
  nodes: [CollectionsImage]!

  """
  A list of edges which contains the `CollectionsImage` and cursor to aid in pagination.
  """
  edges: [CollectionsImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CollectionsImage` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CollectionsImage` edge in the connection."""
type CollectionsImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionsImage` at the end of the edge."""
  node: CollectionsImage
}

"""Methods to use when ordering `CollectionsImage`."""
enum CollectionsImagesOrderBy {
  NATURAL
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Collection`."""
enum CollectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  COLLECTION_TYPE_ASC
  COLLECTION_TYPE_DESC
  AUTOMATIC_COLLECTION_SORT_KEY_ASC
  AUTOMATIC_COLLECTION_SORT_KEY_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN"""
type CollectionsTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  collectionId: Int!
  name: String!

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection
}

"""
A condition to be used against `CollectionsTag` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CollectionsTagCondition {
  """Checks for equality with the object’s `collectionId` field."""
  collectionId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `CollectionsTag` object types. All fields are combined with a logical ‘and.’
"""
input CollectionsTagFilter {
  """Filter by the object’s `collectionId` field."""
  collectionId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `collection` relation."""
  collection: CollectionFilter

  """Checks for all expressions in this list."""
  and: [CollectionsTagFilter!]

  """Checks for any expressions in this list."""
  or: [CollectionsTagFilter!]

  """Negates the expression."""
  not: CollectionsTagFilter
}

"""An input for mutations affecting `CollectionsTag`"""
input CollectionsTagInput {
  collectionId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `CollectionsTag`. Fields that are set will be updated.
"""
input CollectionsTagPatch {
  collectionId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `CollectionsTag` values.
@permissions: COLLECTION_READER,COLLECTION_EDITOR,ADMIN
"""
type CollectionsTagsConnection {
  """A list of `CollectionsTag` objects."""
  nodes: [CollectionsTag]!

  """
  A list of edges which contains the `CollectionsTag` and cursor to aid in pagination.
  """
  edges: [CollectionsTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CollectionsTag` you could get from the connection."""
  totalCount: Int!
}

"""A `CollectionsTag` edge in the connection."""
type CollectionsTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionsTag` at the end of the edge."""
  node: CollectionsTag
}

"""Methods to use when ordering `CollectionsTag`."""
enum CollectionsTagsOrderBy {
  NATURAL
  COLLECTION_ID_ASC
  COLLECTION_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CollectionSubscriptionPayload {
  id: Int!
  collection: Collection
  event: String
}

"""
A filter to be used against many `AutomaticCollectionsFilter` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyAutomaticCollectionsFilterFilter {
  """
  Every related `AutomaticCollectionsFilter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AutomaticCollectionsFilterFilter

  """
  Some related `AutomaticCollectionsFilter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AutomaticCollectionsFilterFilter

  """
  No related `AutomaticCollectionsFilter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AutomaticCollectionsFilterFilter
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `CollectionsImage` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyCollectionsImageFilter {
  """
  Every related `CollectionsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionsImageFilter

  """
  Some related `CollectionsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionsImageFilter

  """
  No related `CollectionsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionsImageFilter
}

"""
A filter to be used against many `CollectionsTag` object types. All fields are combined with a logical ‘and.’
"""
input CollectionToManyCollectionsTagFilter {
  """
  Every related `CollectionsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionsTagFilter

  """
  Some related `CollectionsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionsTagFilter

  """
  No related `CollectionsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionsTagFilter
}

enum CollectionType {
  MANUAL
  AUTOMATIC
}

"""
A filter to be used against CollectionType fields. All fields are combined with a logical ‘and.’
"""
input CollectionTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: CollectionType

  """Not equal to the specified value."""
  notEqualTo: CollectionType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: CollectionType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: CollectionType

  """Included in the specified list."""
  in: [CollectionType!]

  """Not included in the specified list."""
  notIn: [CollectionType!]

  """Less than the specified value."""
  lessThan: CollectionType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: CollectionType

  """Greater than the specified value."""
  greaterThan: CollectionType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: CollectionType
}

"""
All input for the create `AutomaticCollectionsFilter` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input CreateAutomaticCollectionsFilterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AutomaticCollectionsFilter` to be created by this mutation."""
  automaticCollectionsFilter: AutomaticCollectionsFilterInput!
}

"""The output of our create `AutomaticCollectionsFilter` mutation."""
type CreateAutomaticCollectionsFilterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AutomaticCollectionsFilter` that was created by this mutation."""
  automaticCollectionsFilter: AutomaticCollectionsFilter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `AutomaticCollectionsFilter`.
  """
  collection: Collection

  """An edge for our `AutomaticCollectionsFilter`. May be used by Relay 1."""
  automaticCollectionsFilterEdge(
    """The method to use when ordering `AutomaticCollectionsFilter`."""
    orderBy: [AutomaticCollectionsFiltersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AutomaticCollectionsFiltersEdge
}

"""
All input for the create `Collection` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input CreateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Collection` to be created by this mutation."""
  collection: CollectionInput!
}

"""The output of our create `Collection` mutation."""
type CreateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was created by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the create `CollectionRelation` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input CreateCollectionRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CollectionRelation` to be created by this mutation."""
  collectionRelation: CollectionRelationInput!
}

"""The output of our create `CollectionRelation` mutation."""
type CreateCollectionRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionRelation` that was created by this mutation."""
  collectionRelation: CollectionRelation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode

  """An edge for our `CollectionRelation`. May be used by Relay 1."""
  collectionRelationEdge(
    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionRelationsEdge
}

"""
All input for the create `CollectionsImage` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input CreateCollectionsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CollectionsImage` to be created by this mutation."""
  collectionsImage: CollectionsImageInput!
}

"""The output of our create `CollectionsImage` mutation."""
type CreateCollectionsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsImage` that was created by this mutation."""
  collectionsImage: CollectionsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection

  """An edge for our `CollectionsImage`. May be used by Relay 1."""
  collectionsImageEdge(
    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsImagesEdge
}

"""
All input for the create `CollectionsTag` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input CreateCollectionsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CollectionsTag` to be created by this mutation."""
  collectionsTag: CollectionsTagInput!
}

"""The output of our create `CollectionsTag` mutation."""
type CreateCollectionsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsTag` that was created by this mutation."""
  collectionsTag: CollectionsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection

  """An edge for our `CollectionsTag`. May be used by Relay 1."""
  collectionsTagEdge(
    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsTagsEdge
}

"""
All input for the create `Episode` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Episode` to be created by this mutation."""
  episode: EpisodeInput!
}

"""The output of our create `Episode` mutation."""
type CreateEpisodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Episode` that was created by this mutation."""
  episode: Episode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """An edge for our `Episode`. May be used by Relay 1."""
  episodeEdge(
    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesEdge
}

"""
All input for the create `EpisodesCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesCast` to be created by this mutation."""
  episodesCast: EpisodesCastInput!
}

"""The output of our create `EpisodesCast` mutation."""
type CreateEpisodesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesCast` that was created by this mutation."""
  episodesCast: EpisodesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode

  """An edge for our `EpisodesCast`. May be used by Relay 1."""
  episodesCastEdge(
    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesCastsEdge
}

"""
All input for the create `EpisodesImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesImage` to be created by this mutation."""
  episodesImage: EpisodesImageInput!
}

"""The output of our create `EpisodesImage` mutation."""
type CreateEpisodesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesImage` that was created by this mutation."""
  episodesImage: EpisodesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode

  """An edge for our `EpisodesImage`. May be used by Relay 1."""
  episodesImageEdge(
    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesImagesEdge
}

"""
All input for the create `EpisodesLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesLicense` to be created by this mutation."""
  episodesLicense: EpisodesLicenseInput!
}

"""The output of our create `EpisodesLicense` mutation."""
type CreateEpisodesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicense` that was created by this mutation."""
  episodesLicense: EpisodesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode

  """An edge for our `EpisodesLicense`. May be used by Relay 1."""
  episodesLicenseEdge(
    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesEdge
}

"""
All input for the create `EpisodesProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` to be created by this mutation."""
  episodesProductionCountry: EpisodesProductionCountryInput!
}

"""The output of our create `EpisodesProductionCountry` mutation."""
type CreateEpisodesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` that was created by this mutation."""
  episodesProductionCountry: EpisodesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode

  """An edge for our `EpisodesProductionCountry`. May be used by Relay 1."""
  episodesProductionCountryEdge(
    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesProductionCountriesEdge
}

"""
All input for the create `EpisodesTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesTag` to be created by this mutation."""
  episodesTag: EpisodesTagInput!
}

"""The output of our create `EpisodesTag` mutation."""
type CreateEpisodesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTag` that was created by this mutation."""
  episodesTag: EpisodesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode

  """An edge for our `EpisodesTag`. May be used by Relay 1."""
  episodesTagEdge(
    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTagsEdge
}

"""
All input for the create `EpisodesTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesTrailer` to be created by this mutation."""
  episodesTrailer: EpisodesTrailerInput!
}

"""The output of our create `EpisodesTrailer` mutation."""
type CreateEpisodesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTrailer` that was created by this mutation."""
  episodesTrailer: EpisodesTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTrailer`."""
  episode: Episode

  """An edge for our `EpisodesTrailer`. May be used by Relay 1."""
  episodesTrailerEdge(
    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTrailersEdge
}

"""
All input for the create `EpisodesTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateEpisodesTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EpisodesTvshowGenre` to be created by this mutation."""
  episodesTvshowGenre: EpisodesTvshowGenreInput!
}

"""The output of our create `EpisodesTvshowGenre` mutation."""
type CreateEpisodesTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTvshowGenre` that was created by this mutation."""
  episodesTvshowGenre: EpisodesTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesTvshowGenre`.
  """
  episode: Episode

  """
  Reads a single `TvshowGenre` that is related to this `EpisodesTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `EpisodesTvshowGenre`. May be used by Relay 1."""
  episodesTvshowGenreEdge(
    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTvshowGenresEdge
}

"""
All input for the create `MovieGenre` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input CreateMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MovieGenre` to be created by this mutation."""
  movieGenre: MovieGenreInput!
}

"""The output of our create `MovieGenre` mutation."""
type CreateMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MovieGenre` that was created by this mutation."""
  movieGenre: MovieGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MovieGenre`. May be used by Relay 1."""
  movieGenreEdge(
    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MovieGenresEdge
}

"""
All input for the create `Movie` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Movie` to be created by this mutation."""
  movie: MovieInput!
}

"""The output of our create `Movie` mutation."""
type CreateMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was created by this mutation."""
  movie: Movie

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""
All input for the create `MoviesCast` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMoviesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesCast` to be created by this mutation."""
  moviesCast: MoviesCastInput!
}

"""The output of our create `MoviesCast` mutation."""
type CreateMoviesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesCast` that was created by this mutation."""
  moviesCast: MoviesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie

  """An edge for our `MoviesCast`. May be used by Relay 1."""
  moviesCastEdge(
    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesCastsEdge
}

"""
All input for the create `MoviesImage` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMoviesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesImage` to be created by this mutation."""
  moviesImage: MoviesImageInput!
}

"""The output of our create `MoviesImage` mutation."""
type CreateMoviesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesImage` that was created by this mutation."""
  moviesImage: MoviesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie

  """An edge for our `MoviesImage`. May be used by Relay 1."""
  moviesImageEdge(
    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesImagesEdge
}

"""
All input for the create `MoviesLicense` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMoviesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesLicense` to be created by this mutation."""
  moviesLicense: MoviesLicenseInput!
}

"""The output of our create `MoviesLicense` mutation."""
type CreateMoviesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicense` that was created by this mutation."""
  moviesLicense: MoviesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie

  """An edge for our `MoviesLicense`. May be used by Relay 1."""
  moviesLicenseEdge(
    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesEdge
}

"""
All input for the create `MoviesMovieGenre` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMoviesMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesMovieGenre` to be created by this mutation."""
  moviesMovieGenre: MoviesMovieGenreInput!
}

"""The output of our create `MoviesMovieGenre` mutation."""
type CreateMoviesMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesMovieGenre` that was created by this mutation."""
  moviesMovieGenre: MoviesMovieGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesMovieGenre`."""
  movie: Movie

  """
  Reads a single `MovieGenre` that is related to this `MoviesMovieGenre`.
  """
  movieGenres: MovieGenre

  """An edge for our `MoviesMovieGenre`. May be used by Relay 1."""
  moviesMovieGenreEdge(
    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesMovieGenresEdge
}

"""
All input for the create `MoviesProductionCountry` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMoviesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` to be created by this mutation."""
  moviesProductionCountry: MoviesProductionCountryInput!
}

"""The output of our create `MoviesProductionCountry` mutation."""
type CreateMoviesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` that was created by this mutation."""
  moviesProductionCountry: MoviesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie

  """An edge for our `MoviesProductionCountry`. May be used by Relay 1."""
  moviesProductionCountryEdge(
    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesProductionCountriesEdge
}

"""
All input for the create `MoviesTag` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMoviesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesTag` to be created by this mutation."""
  moviesTag: MoviesTagInput!
}

"""The output of our create `MoviesTag` mutation."""
type CreateMoviesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTag` that was created by this mutation."""
  moviesTag: MoviesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie

  """An edge for our `MoviesTag`. May be used by Relay 1."""
  moviesTagEdge(
    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTagsEdge
}

"""
All input for the create `MoviesTrailer` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input CreateMoviesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MoviesTrailer` to be created by this mutation."""
  moviesTrailer: MoviesTrailerInput!
}

"""The output of our create `MoviesTrailer` mutation."""
type CreateMoviesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTrailer` that was created by this mutation."""
  moviesTrailer: MoviesTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTrailer`."""
  movie: Movie

  """An edge for our `MoviesTrailer`. May be used by Relay 1."""
  moviesTrailerEdge(
    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTrailersEdge
}

"""
All input for the create `Season` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Season` to be created by this mutation."""
  season: SeasonInput!
}

"""The output of our create `Season` mutation."""
type CreateSeasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Season` that was created by this mutation."""
  season: Season

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """An edge for our `Season`. May be used by Relay 1."""
  seasonEdge(
    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsEdge
}

"""
All input for the create `SeasonsCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsCast` to be created by this mutation."""
  seasonsCast: SeasonsCastInput!
}

"""The output of our create `SeasonsCast` mutation."""
type CreateSeasonsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsCast` that was created by this mutation."""
  seasonsCast: SeasonsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season

  """An edge for our `SeasonsCast`. May be used by Relay 1."""
  seasonsCastEdge(
    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsCastsEdge
}

"""
All input for the create `SeasonsImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsImage` to be created by this mutation."""
  seasonsImage: SeasonsImageInput!
}

"""The output of our create `SeasonsImage` mutation."""
type CreateSeasonsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsImage` that was created by this mutation."""
  seasonsImage: SeasonsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season

  """An edge for our `SeasonsImage`. May be used by Relay 1."""
  seasonsImageEdge(
    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsImagesEdge
}

"""
All input for the create `SeasonsLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsLicense` to be created by this mutation."""
  seasonsLicense: SeasonsLicenseInput!
}

"""The output of our create `SeasonsLicense` mutation."""
type CreateSeasonsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicense` that was created by this mutation."""
  seasonsLicense: SeasonsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season

  """An edge for our `SeasonsLicense`. May be used by Relay 1."""
  seasonsLicenseEdge(
    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesEdge
}

"""
All input for the create `SeasonsProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` to be created by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountryInput!
}

"""The output of our create `SeasonsProductionCountry` mutation."""
type CreateSeasonsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` that was created by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season

  """An edge for our `SeasonsProductionCountry`. May be used by Relay 1."""
  seasonsProductionCountryEdge(
    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsProductionCountriesEdge
}

"""
All input for the create `SeasonsTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsTag` to be created by this mutation."""
  seasonsTag: SeasonsTagInput!
}

"""The output of our create `SeasonsTag` mutation."""
type CreateSeasonsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTag` that was created by this mutation."""
  seasonsTag: SeasonsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season

  """An edge for our `SeasonsTag`. May be used by Relay 1."""
  seasonsTagEdge(
    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTagsEdge
}

"""
All input for the create `SeasonsTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsTrailer` to be created by this mutation."""
  seasonsTrailer: SeasonsTrailerInput!
}

"""The output of our create `SeasonsTrailer` mutation."""
type CreateSeasonsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTrailer` that was created by this mutation."""
  seasonsTrailer: SeasonsTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTrailer`."""
  season: Season

  """An edge for our `SeasonsTrailer`. May be used by Relay 1."""
  seasonsTrailerEdge(
    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTrailersEdge
}

"""
All input for the create `SeasonsTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateSeasonsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SeasonsTvshowGenre` to be created by this mutation."""
  seasonsTvshowGenre: SeasonsTvshowGenreInput!
}

"""The output of our create `SeasonsTvshowGenre` mutation."""
type CreateSeasonsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTvshowGenre` that was created by this mutation."""
  seasonsTvshowGenre: SeasonsTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTvshowGenre`."""
  season: Season

  """
  Reads a single `TvshowGenre` that is related to this `SeasonsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `SeasonsTvshowGenre`. May be used by Relay 1."""
  seasonsTvshowGenreEdge(
    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTvshowGenresEdge
}

"""
All input for the create `TvshowGenre` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input CreateTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowGenre` to be created by this mutation."""
  tvshowGenre: TvshowGenreInput!
}

"""The output of our create `TvshowGenre` mutation."""
type CreateTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowGenre` that was created by this mutation."""
  tvshowGenre: TvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TvshowGenre`. May be used by Relay 1."""
  tvshowGenreEdge(
    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowGenresEdge
}

"""
All input for the create `Tvshow` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tvshow` to be created by this mutation."""
  tvshow: TvshowInput!
}

"""The output of our create `Tvshow` mutation."""
type CreateTvshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tvshow` that was created by this mutation."""
  tvshow: Tvshow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tvshow`. May be used by Relay 1."""
  tvshowEdge(
    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsEdge
}

"""
All input for the create `TvshowsCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsCast` to be created by this mutation."""
  tvshowsCast: TvshowsCastInput!
}

"""The output of our create `TvshowsCast` mutation."""
type CreateTvshowsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsCast` that was created by this mutation."""
  tvshowsCast: TvshowsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow

  """An edge for our `TvshowsCast`. May be used by Relay 1."""
  tvshowsCastEdge(
    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsCastsEdge
}

"""
All input for the create `TvshowsImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsImage` to be created by this mutation."""
  tvshowsImage: TvshowsImageInput!
}

"""The output of our create `TvshowsImage` mutation."""
type CreateTvshowsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsImage` that was created by this mutation."""
  tvshowsImage: TvshowsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow

  """An edge for our `TvshowsImage`. May be used by Relay 1."""
  tvshowsImageEdge(
    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsImagesEdge
}

"""
All input for the create `TvshowsLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsLicense` to be created by this mutation."""
  tvshowsLicense: TvshowsLicenseInput!
}

"""The output of our create `TvshowsLicense` mutation."""
type CreateTvshowsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicense` that was created by this mutation."""
  tvshowsLicense: TvshowsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow

  """An edge for our `TvshowsLicense`. May be used by Relay 1."""
  tvshowsLicenseEdge(
    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesEdge
}

"""
All input for the create `TvshowsProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` to be created by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountryInput!
}

"""The output of our create `TvshowsProductionCountry` mutation."""
type CreateTvshowsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` that was created by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow

  """An edge for our `TvshowsProductionCountry`. May be used by Relay 1."""
  tvshowsProductionCountryEdge(
    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsProductionCountriesEdge
}

"""
All input for the create `TvshowsTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsTag` to be created by this mutation."""
  tvshowsTag: TvshowsTagInput!
}

"""The output of our create `TvshowsTag` mutation."""
type CreateTvshowsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTag` that was created by this mutation."""
  tvshowsTag: TvshowsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTag`. May be used by Relay 1."""
  tvshowsTagEdge(
    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTagsEdge
}

"""
All input for the create `TvshowsTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsTrailer` to be created by this mutation."""
  tvshowsTrailer: TvshowsTrailerInput!
}

"""The output of our create `TvshowsTrailer` mutation."""
type CreateTvshowsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTrailer` that was created by this mutation."""
  tvshowsTrailer: TvshowsTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTrailer`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTrailer`. May be used by Relay 1."""
  tvshowsTrailerEdge(
    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTrailersEdge
}

"""
All input for the create `TvshowsTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input CreateTvshowsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TvshowsTvshowGenre` to be created by this mutation."""
  tvshowsTvshowGenre: TvshowsTvshowGenreInput!
}

"""The output of our create `TvshowsTvshowGenre` mutation."""
type CreateTvshowsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTvshowGenre` that was created by this mutation."""
  tvshowsTvshowGenre: TvshowsTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTvshowGenre`."""
  tvshow: Tvshow

  """
  Reads a single `TvshowGenre` that is related to this `TvshowsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `TvshowsTvshowGenre`. May be used by Relay 1."""
  tvshowsTvshowGenreEdge(
    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTvshowGenresEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
All input for the `deleteAutomaticCollectionsFilterByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteAutomaticCollectionsFilterByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AutomaticCollectionsFilter` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAutomaticCollectionsFilter` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteAutomaticCollectionsFilterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `AutomaticCollectionsFilter` mutation."""
type DeleteAutomaticCollectionsFilterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AutomaticCollectionsFilter` that was deleted by this mutation."""
  automaticCollectionsFilter: AutomaticCollectionsFilter
  deletedAutomaticCollectionsFilterNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `AutomaticCollectionsFilter`.
  """
  collection: Collection

  """An edge for our `AutomaticCollectionsFilter`. May be used by Relay 1."""
  automaticCollectionsFilterEdge(
    """The method to use when ordering `AutomaticCollectionsFilter`."""
    orderBy: [AutomaticCollectionsFiltersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AutomaticCollectionsFiltersEdge
}

"""
All input for the `deleteCollectionByExternalId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""
All input for the `deleteCollectionByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollection` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Collection` mutation."""
type DeleteCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was deleted by this mutation."""
  collection: Collection
  deletedCollectionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `deleteCollectionRelationByCollectionIdAndEpisodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionRelationByCollectionIdAndEpisodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!
  episodeId: Int!
}

"""
All input for the `deleteCollectionRelationByCollectionIdAndMovieId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionRelationByCollectionIdAndMovieIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!
  movieId: Int!
}

"""
All input for the `deleteCollectionRelationByCollectionIdAndSeasonId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionRelationByCollectionIdAndSeasonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!
  seasonId: Int!
}

"""
All input for the `deleteCollectionRelationByCollectionIdAndTvshowId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionRelationByCollectionIdAndTvshowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!
  tvshowId: Int!
}

"""
All input for the `deleteCollectionRelationByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionRelationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionRelation` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionRelation` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `CollectionRelation` mutation."""
type DeleteCollectionRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionRelation` that was deleted by this mutation."""
  collectionRelation: CollectionRelation
  deletedCollectionRelationNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode

  """An edge for our `CollectionRelation`. May be used by Relay 1."""
  collectionRelationEdge(
    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionRelationsEdge
}

"""
All input for the `deleteCollectionsImageByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionsImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionsImage` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionsImage` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!
  imageId: Int!
  imageType: CollectionImageType!
}

"""The output of our delete `CollectionsImage` mutation."""
type DeleteCollectionsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsImage` that was deleted by this mutation."""
  collectionsImage: CollectionsImage
  deletedCollectionsImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection

  """An edge for our `CollectionsImage`. May be used by Relay 1."""
  collectionsImageEdge(
    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsImagesEdge
}

"""
All input for the `deleteCollectionsTagByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionsTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionsTag` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCollectionsTag` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input DeleteCollectionsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  collectionId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `CollectionsTag` mutation."""
type DeleteCollectionsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsTag` that was deleted by this mutation."""
  collectionsTag: CollectionsTag
  deletedCollectionsTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection

  """An edge for our `CollectionsTag`. May be used by Relay 1."""
  collectionsTagEdge(
    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsTagsEdge
}

"""
All input for the `deleteEpisodeByExternalId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodeByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""
All input for the `deleteEpisodeByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Episode` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisode` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Episode` mutation."""
type DeleteEpisodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Episode` that was deleted by this mutation."""
  episode: Episode
  deletedEpisodeNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """An edge for our `Episode`. May be used by Relay 1."""
  episodeEdge(
    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesEdge
}

"""
All input for the `deleteEpisodesCastByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesCast` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisodesCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `EpisodesCast` mutation."""
type DeleteEpisodesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesCast` that was deleted by this mutation."""
  episodesCast: EpisodesCast
  deletedEpisodesCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode

  """An edge for our `EpisodesCast`. May be used by Relay 1."""
  episodesCastEdge(
    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesCastsEdge
}

"""
All input for the `deleteEpisodesImageByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesImage` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisodesImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!
  imageId: Int!
  imageType: EpisodeImageType!
}

"""The output of our delete `EpisodesImage` mutation."""
type DeleteEpisodesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesImage` that was deleted by this mutation."""
  episodesImage: EpisodesImage
  deletedEpisodesImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode

  """An edge for our `EpisodesImage`. May be used by Relay 1."""
  episodesImageEdge(
    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesImagesEdge
}

"""
All input for the `deleteEpisodesLicenseByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesLicense` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisodesLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `EpisodesLicense` mutation."""
type DeleteEpisodesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicense` that was deleted by this mutation."""
  episodesLicense: EpisodesLicense
  deletedEpisodesLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode

  """An edge for our `EpisodesLicense`. May be used by Relay 1."""
  episodesLicenseEdge(
    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesEdge
}

"""
All input for the `deleteEpisodesProductionCountryByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesProductionCountry` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisodesProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `EpisodesProductionCountry` mutation."""
type DeleteEpisodesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` that was deleted by this mutation."""
  episodesProductionCountry: EpisodesProductionCountry
  deletedEpisodesProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode

  """An edge for our `EpisodesProductionCountry`. May be used by Relay 1."""
  episodesProductionCountryEdge(
    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesProductionCountriesEdge
}

"""
All input for the `deleteEpisodesTagByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesTag` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisodesTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `EpisodesTag` mutation."""
type DeleteEpisodesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTag` that was deleted by this mutation."""
  episodesTag: EpisodesTag
  deletedEpisodesTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode

  """An edge for our `EpisodesTag`. May be used by Relay 1."""
  episodesTagEdge(
    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTagsEdge
}

"""
All input for the `deleteEpisodesTrailerByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesTrailer` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisodesTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!
  videoId: Int!
}

"""The output of our delete `EpisodesTrailer` mutation."""
type DeleteEpisodesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTrailer` that was deleted by this mutation."""
  episodesTrailer: EpisodesTrailer
  deletedEpisodesTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTrailer`."""
  episode: Episode

  """An edge for our `EpisodesTrailer`. May be used by Relay 1."""
  episodesTrailerEdge(
    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTrailersEdge
}

"""
All input for the `deleteEpisodesTvshowGenreByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesTvshowGenre` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEpisodesTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteEpisodesTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  episodeId: Int!
  tvshowGenresId: Int!
}

"""The output of our delete `EpisodesTvshowGenre` mutation."""
type DeleteEpisodesTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTvshowGenre` that was deleted by this mutation."""
  episodesTvshowGenre: EpisodesTvshowGenre
  deletedEpisodesTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesTvshowGenre`.
  """
  episode: Episode

  """
  Reads a single `TvshowGenre` that is related to this `EpisodesTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `EpisodesTvshowGenre`. May be used by Relay 1."""
  episodesTvshowGenreEdge(
    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTvshowGenresEdge
}

"""
All input for the `deleteMovieByExternalId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMovieByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""
All input for the `deleteMovieByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMovieByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Movie` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMovieGenreByNodeId` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input DeleteMovieGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MovieGenre` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMovieGenre` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input DeleteMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `MovieGenre` mutation."""
type DeleteMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MovieGenre` that was deleted by this mutation."""
  movieGenre: MovieGenre
  deletedMovieGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MovieGenre`. May be used by Relay 1."""
  movieGenreEdge(
    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MovieGenresEdge
}

"""
All input for the `deleteMovie` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Movie` mutation."""
type DeleteMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was deleted by this mutation."""
  movie: Movie
  deletedMovieNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""
All input for the `deleteMoviesCastByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesCast` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMoviesCast` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `MoviesCast` mutation."""
type DeleteMoviesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesCast` that was deleted by this mutation."""
  moviesCast: MoviesCast
  deletedMoviesCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie

  """An edge for our `MoviesCast`. May be used by Relay 1."""
  moviesCastEdge(
    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesCastsEdge
}

"""
All input for the `deleteMoviesImageByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesImage` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMoviesImage` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!
  imageId: Int!
  imageType: MovieImageType!
}

"""The output of our delete `MoviesImage` mutation."""
type DeleteMoviesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesImage` that was deleted by this mutation."""
  moviesImage: MoviesImage
  deletedMoviesImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie

  """An edge for our `MoviesImage`. May be used by Relay 1."""
  moviesImageEdge(
    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesImagesEdge
}

"""
All input for the `deleteMoviesLicenseByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesLicense` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMoviesLicense` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `MoviesLicense` mutation."""
type DeleteMoviesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicense` that was deleted by this mutation."""
  moviesLicense: MoviesLicense
  deletedMoviesLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie

  """An edge for our `MoviesLicense`. May be used by Relay 1."""
  moviesLicenseEdge(
    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesEdge
}

"""
All input for the `deleteMoviesMovieGenreByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesMovieGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesMovieGenre` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMoviesMovieGenre` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!
  movieGenresId: Int!
}

"""The output of our delete `MoviesMovieGenre` mutation."""
type DeleteMoviesMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesMovieGenre` that was deleted by this mutation."""
  moviesMovieGenre: MoviesMovieGenre
  deletedMoviesMovieGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesMovieGenre`."""
  movie: Movie

  """
  Reads a single `MovieGenre` that is related to this `MoviesMovieGenre`.
  """
  movieGenres: MovieGenre

  """An edge for our `MoviesMovieGenre`. May be used by Relay 1."""
  moviesMovieGenreEdge(
    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesMovieGenresEdge
}

"""
All input for the `deleteMoviesProductionCountryByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesProductionCountry` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMoviesProductionCountry` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `MoviesProductionCountry` mutation."""
type DeleteMoviesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` that was deleted by this mutation."""
  moviesProductionCountry: MoviesProductionCountry
  deletedMoviesProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie

  """An edge for our `MoviesProductionCountry`. May be used by Relay 1."""
  moviesProductionCountryEdge(
    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesProductionCountriesEdge
}

"""
All input for the `deleteMoviesTagByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesTag` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMoviesTag` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `MoviesTag` mutation."""
type DeleteMoviesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTag` that was deleted by this mutation."""
  moviesTag: MoviesTag
  deletedMoviesTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie

  """An edge for our `MoviesTag`. May be used by Relay 1."""
  moviesTagEdge(
    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTagsEdge
}

"""
All input for the `deleteMoviesTrailerByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesTrailer` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMoviesTrailer` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input DeleteMoviesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  movieId: Int!
  videoId: Int!
}

"""The output of our delete `MoviesTrailer` mutation."""
type DeleteMoviesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTrailer` that was deleted by this mutation."""
  moviesTrailer: MoviesTrailer
  deletedMoviesTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTrailer`."""
  movie: Movie

  """An edge for our `MoviesTrailer`. May be used by Relay 1."""
  moviesTrailerEdge(
    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTrailersEdge
}

"""
All input for the `deleteSeasonByExternalId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""
All input for the `deleteSeasonByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Season` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeason` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Season` mutation."""
type DeleteSeasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Season` that was deleted by this mutation."""
  season: Season
  deletedSeasonNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """An edge for our `Season`. May be used by Relay 1."""
  seasonEdge(
    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsEdge
}

"""
All input for the `deleteSeasonsCastByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsCast` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeasonsCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `SeasonsCast` mutation."""
type DeleteSeasonsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsCast` that was deleted by this mutation."""
  seasonsCast: SeasonsCast
  deletedSeasonsCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season

  """An edge for our `SeasonsCast`. May be used by Relay 1."""
  seasonsCastEdge(
    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsCastsEdge
}

"""
All input for the `deleteSeasonsImageByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsImage` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeasonsImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!
  imageId: Int!
  imageType: SeasonImageType!
}

"""The output of our delete `SeasonsImage` mutation."""
type DeleteSeasonsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsImage` that was deleted by this mutation."""
  seasonsImage: SeasonsImage
  deletedSeasonsImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season

  """An edge for our `SeasonsImage`. May be used by Relay 1."""
  seasonsImageEdge(
    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsImagesEdge
}

"""
All input for the `deleteSeasonsLicenseByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsLicense` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeasonsLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `SeasonsLicense` mutation."""
type DeleteSeasonsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicense` that was deleted by this mutation."""
  seasonsLicense: SeasonsLicense
  deletedSeasonsLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season

  """An edge for our `SeasonsLicense`. May be used by Relay 1."""
  seasonsLicenseEdge(
    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesEdge
}

"""
All input for the `deleteSeasonsProductionCountryByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsProductionCountry` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeasonsProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `SeasonsProductionCountry` mutation."""
type DeleteSeasonsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` that was deleted by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountry
  deletedSeasonsProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season

  """An edge for our `SeasonsProductionCountry`. May be used by Relay 1."""
  seasonsProductionCountryEdge(
    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsProductionCountriesEdge
}

"""
All input for the `deleteSeasonsTagByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsTag` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeasonsTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `SeasonsTag` mutation."""
type DeleteSeasonsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTag` that was deleted by this mutation."""
  seasonsTag: SeasonsTag
  deletedSeasonsTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season

  """An edge for our `SeasonsTag`. May be used by Relay 1."""
  seasonsTagEdge(
    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTagsEdge
}

"""
All input for the `deleteSeasonsTrailerByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsTrailer` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeasonsTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!
  videoId: Int!
}

"""The output of our delete `SeasonsTrailer` mutation."""
type DeleteSeasonsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTrailer` that was deleted by this mutation."""
  seasonsTrailer: SeasonsTrailer
  deletedSeasonsTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTrailer`."""
  season: Season

  """An edge for our `SeasonsTrailer`. May be used by Relay 1."""
  seasonsTrailerEdge(
    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTrailersEdge
}

"""
All input for the `deleteSeasonsTvshowGenreByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsTvshowGenre` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSeasonsTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteSeasonsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  seasonId: Int!
  tvshowGenresId: Int!
}

"""The output of our delete `SeasonsTvshowGenre` mutation."""
type DeleteSeasonsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTvshowGenre` that was deleted by this mutation."""
  seasonsTvshowGenre: SeasonsTvshowGenre
  deletedSeasonsTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTvshowGenre`."""
  season: Season

  """
  Reads a single `TvshowGenre` that is related to this `SeasonsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `SeasonsTvshowGenre`. May be used by Relay 1."""
  seasonsTvshowGenreEdge(
    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTvshowGenresEdge
}

"""
All input for the `deleteTvshowByExternalId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  externalId: String!
}

"""
All input for the `deleteTvshowByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tvshow` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowGenreByNodeId` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input DeleteTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowGenre` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowGenre` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input DeleteTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TvshowGenre` mutation."""
type DeleteTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowGenre` that was deleted by this mutation."""
  tvshowGenre: TvshowGenre
  deletedTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TvshowGenre`. May be used by Relay 1."""
  tvshowGenreEdge(
    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowGenresEdge
}

"""
All input for the `deleteTvshow` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Tvshow` mutation."""
type DeleteTvshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tvshow` that was deleted by this mutation."""
  tvshow: Tvshow
  deletedTvshowNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tvshow`. May be used by Relay 1."""
  tvshowEdge(
    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsEdge
}

"""
All input for the `deleteTvshowsCastByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsCast` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowsCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `TvshowsCast` mutation."""
type DeleteTvshowsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsCast` that was deleted by this mutation."""
  tvshowsCast: TvshowsCast
  deletedTvshowsCastNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow

  """An edge for our `TvshowsCast`. May be used by Relay 1."""
  tvshowsCastEdge(
    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsCastsEdge
}

"""
All input for the `deleteTvshowsImageByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsImage` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowsImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!
  imageId: Int!
  imageType: TvshowImageType!
}

"""The output of our delete `TvshowsImage` mutation."""
type DeleteTvshowsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsImage` that was deleted by this mutation."""
  tvshowsImage: TvshowsImage
  deletedTvshowsImageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow

  """An edge for our `TvshowsImage`. May be used by Relay 1."""
  tvshowsImageEdge(
    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsImagesEdge
}

"""
All input for the `deleteTvshowsLicenseByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsLicense` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowsLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `TvshowsLicense` mutation."""
type DeleteTvshowsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicense` that was deleted by this mutation."""
  tvshowsLicense: TvshowsLicense
  deletedTvshowsLicenseNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow

  """An edge for our `TvshowsLicense`. May be used by Relay 1."""
  tvshowsLicenseEdge(
    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesEdge
}

"""
All input for the `deleteTvshowsProductionCountryByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsProductionCountry` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowsProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `TvshowsProductionCountry` mutation."""
type DeleteTvshowsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` that was deleted by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountry
  deletedTvshowsProductionCountryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow

  """An edge for our `TvshowsProductionCountry`. May be used by Relay 1."""
  tvshowsProductionCountryEdge(
    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsProductionCountriesEdge
}

"""
All input for the `deleteTvshowsTagByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsTag` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowsTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our delete `TvshowsTag` mutation."""
type DeleteTvshowsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTag` that was deleted by this mutation."""
  tvshowsTag: TvshowsTag
  deletedTvshowsTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTag`. May be used by Relay 1."""
  tvshowsTagEdge(
    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTagsEdge
}

"""
All input for the `deleteTvshowsTrailerByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsTrailer` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowsTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!
  videoId: Int!
}

"""The output of our delete `TvshowsTrailer` mutation."""
type DeleteTvshowsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTrailer` that was deleted by this mutation."""
  tvshowsTrailer: TvshowsTrailer
  deletedTvshowsTrailerNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTrailer`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTrailer`. May be used by Relay 1."""
  tvshowsTrailerEdge(
    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTrailersEdge
}

"""
All input for the `deleteTvshowsTvshowGenreByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsTvshowGenre` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteTvshowsTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input DeleteTvshowsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tvshowId: Int!
  tvshowGenresId: Int!
}

"""The output of our delete `TvshowsTvshowGenre` mutation."""
type DeleteTvshowsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTvshowGenre` that was deleted by this mutation."""
  tvshowsTvshowGenre: TvshowsTvshowGenre
  deletedTvshowsTvshowGenreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTvshowGenre`."""
  tvshow: Tvshow

  """
  Reads a single `TvshowGenre` that is related to this `TvshowsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `TvshowsTvshowGenre`. May be used by Relay 1."""
  tvshowsTvshowGenreEdge(
    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTvshowGenresEdge
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type Episode implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  seasonId: Int
  index: Int!
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: Int
  publishStatus: PublishStatus
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """Reads and enables pagination through a set of `EpisodesTag`."""
  episodesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTagFilter
  ): EpisodesTagsConnection!

  """Reads and enables pagination through a set of `EpisodesCast`."""
  episodesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesCastFilter
  ): EpisodesCastsConnection!

  """Reads and enables pagination through a set of `EpisodesLicense`."""
  episodesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesLicenseFilter
  ): EpisodesLicensesConnection!

  """
  Reads and enables pagination through a set of `EpisodesProductionCountry`.
  """
  episodesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesProductionCountryFilter
  ): EpisodesProductionCountriesConnection!

  """Reads and enables pagination through a set of `EpisodesTvshowGenre`."""
  episodesTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTvshowGenreFilter
  ): EpisodesTvshowGenresConnection!

  """Reads and enables pagination through a set of `EpisodesImage`."""
  episodesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesImageFilter
  ): EpisodesImagesConnection!

  """Reads and enables pagination through a set of `EpisodesTrailer`."""
  episodesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTrailerFilter
  ): EpisodesTrailersConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!
}

"""
A condition to be used against `Episode` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EpisodeCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `index` field."""
  index: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `originalTitle` field."""
  originalTitle: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `mainVideoId` field."""
  mainVideoId: Int

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `Episode` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `originalTitle` field."""
  originalTitle: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `mainVideoId` field."""
  mainVideoId: IntFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `episodesTags` relation."""
  episodesTags: EpisodeToManyEpisodesTagFilter

  """Some related `episodesTags` exist."""
  episodesTagsExist: Boolean

  """Filter by the object’s `episodesCasts` relation."""
  episodesCasts: EpisodeToManyEpisodesCastFilter

  """Some related `episodesCasts` exist."""
  episodesCastsExist: Boolean

  """Filter by the object’s `episodesLicenses` relation."""
  episodesLicenses: EpisodeToManyEpisodesLicenseFilter

  """Some related `episodesLicenses` exist."""
  episodesLicensesExist: Boolean

  """Filter by the object’s `episodesProductionCountries` relation."""
  episodesProductionCountries: EpisodeToManyEpisodesProductionCountryFilter

  """Some related `episodesProductionCountries` exist."""
  episodesProductionCountriesExist: Boolean

  """Filter by the object’s `episodesTvshowGenres` relation."""
  episodesTvshowGenres: EpisodeToManyEpisodesTvshowGenreFilter

  """Some related `episodesTvshowGenres` exist."""
  episodesTvshowGenresExist: Boolean

  """Filter by the object’s `episodesImages` relation."""
  episodesImages: EpisodeToManyEpisodesImageFilter

  """Some related `episodesImages` exist."""
  episodesImagesExist: Boolean

  """Filter by the object’s `episodesTrailers` relation."""
  episodesTrailers: EpisodeToManyEpisodesTrailerFilter

  """Some related `episodesTrailers` exist."""
  episodesTrailersExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: EpisodeToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """A related `season` exists."""
  seasonExists: Boolean

  """Checks for all expressions in this list."""
  and: [EpisodeFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodeFilter!]

  """Negates the expression."""
  not: EpisodeFilter
}

enum EpisodeImageType {
  COVER
  TEASER
}

"""
A filter to be used against EpisodeImageType fields. All fields are combined with a logical ‘and.’
"""
input EpisodeImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: EpisodeImageType

  """Not equal to the specified value."""
  notEqualTo: EpisodeImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: EpisodeImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: EpisodeImageType

  """Included in the specified list."""
  in: [EpisodeImageType!]

  """Not included in the specified list."""
  notIn: [EpisodeImageType!]

  """Less than the specified value."""
  lessThan: EpisodeImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: EpisodeImageType

  """Greater than the specified value."""
  greaterThan: EpisodeImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: EpisodeImageType
}

"""An input for mutations affecting `Episode`"""
input EpisodeInput {
  seasonId: Int
  index: Int!

  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: Int
}

"""
Represents an update to a `Episode`. Fields that are set will be updated.
"""
input EpisodePatch {
  seasonId: Int
  index: Int

  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: Int
  publishStatus: PublishStatus
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type EpisodesCast implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  episodeId: Int!
  name: String!

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode
}

"""
A condition to be used against `EpisodesCast` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesCastCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `EpisodesCast` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesCastFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesCastFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesCastFilter!]

  """Negates the expression."""
  not: EpisodesCastFilter
}

"""An input for mutations affecting `EpisodesCast`"""
input EpisodesCastInput {
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `EpisodesCast`. Fields that are set will be updated.
"""
input EpisodesCastPatch {
  episodeId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `EpisodesCast` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesCastsConnection {
  """A list of `EpisodesCast` objects."""
  nodes: [EpisodesCast]!

  """
  A list of edges which contains the `EpisodesCast` and cursor to aid in pagination.
  """
  edges: [EpisodesCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EpisodesCast` you could get from the connection."""
  totalCount: Int!
}

"""A `EpisodesCast` edge in the connection."""
type EpisodesCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesCast` at the end of the edge."""
  node: EpisodesCast
}

"""Methods to use when ordering `EpisodesCast`."""
enum EpisodesCastsOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `Episode` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesConnection {
  """A list of `Episode` objects."""
  nodes: [Episode]!

  """
  A list of edges which contains the `Episode` and cursor to aid in pagination.
  """
  edges: [EpisodesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Episode` you could get from the connection."""
  totalCount: Int!
}

"""A `Episode` edge in the connection."""
type EpisodesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Episode` at the end of the edge."""
  node: Episode
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type EpisodesImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  episodeId: Int!
  imageId: Int!
  imageType: EpisodeImageType!

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode
}

"""
A condition to be used against `EpisodesImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesImageCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `imageType` field."""
  imageType: EpisodeImageType
}

"""
A filter to be used against `EpisodesImage` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesImageFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Filter by the object’s `imageType` field."""
  imageType: EpisodeImageTypeFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesImageFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesImageFilter!]

  """Negates the expression."""
  not: EpisodesImageFilter
}

"""An input for mutations affecting `EpisodesImage`"""
input EpisodesImageInput {
  episodeId: Int!
  imageId: Int!
  imageType: EpisodeImageType!
}

"""
Represents an update to a `EpisodesImage`. Fields that are set will be updated.
"""
input EpisodesImagePatch {
  episodeId: Int
  imageId: Int
  imageType: EpisodeImageType
}

"""
A connection to a list of `EpisodesImage` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesImagesConnection {
  """A list of `EpisodesImage` objects."""
  nodes: [EpisodesImage]!

  """
  A list of edges which contains the `EpisodesImage` and cursor to aid in pagination.
  """
  edges: [EpisodesImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EpisodesImage` you could get from the connection."""
  totalCount: Int!
}

"""A `EpisodesImage` edge in the connection."""
type EpisodesImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesImage` at the end of the edge."""
  node: EpisodesImage
}

"""Methods to use when ordering `EpisodesImage`."""
enum EpisodesImagesOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type EpisodesLicense implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  episodeId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode
}

"""
A condition to be used against `EpisodesLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `countries` field."""
  countries: [IsoAlphaThreeCountryCodes]

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `EpisodesLicense` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `countries` field."""
  countries: IsoAlphaThreeCountryCodesListFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesLicenseFilter!]

  """Negates the expression."""
  not: EpisodesLicenseFilter
}

"""An input for mutations affecting `EpisodesLicense`"""
input EpisodesLicenseInput {
  episodeId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
Represents an update to a `EpisodesLicense`. Fields that are set will be updated.
"""
input EpisodesLicensePatch {
  episodeId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
A connection to a list of `EpisodesLicense` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesLicensesConnection {
  """A list of `EpisodesLicense` objects."""
  nodes: [EpisodesLicense]!

  """
  A list of edges which contains the `EpisodesLicense` and cursor to aid in pagination.
  """
  edges: [EpisodesLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesLicense` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EpisodesLicense` edge in the connection."""
type EpisodesLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesLicense` at the end of the edge."""
  node: EpisodesLicense
}

"""Methods to use when ordering `EpisodesLicense`."""
enum EpisodesLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  COUNTRIES_ASC
  COUNTRIES_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Episode`."""
enum EpisodesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SEASON_ID_ASC
  SEASON_ID_DESC
  INDEX_ASC
  INDEX_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ORIGINAL_TITLE_ASC
  ORIGINAL_TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  MAIN_VIDEO_ID_ASC
  MAIN_VIDEO_ID_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `EpisodesProductionCountry` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesProductionCountriesConnection {
  """A list of `EpisodesProductionCountry` objects."""
  nodes: [EpisodesProductionCountry]!

  """
  A list of edges which contains the `EpisodesProductionCountry` and cursor to aid in pagination.
  """
  edges: [EpisodesProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EpisodesProductionCountry` edge in the connection."""
type EpisodesProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesProductionCountry` at the end of the edge."""
  node: EpisodesProductionCountry
}

"""Methods to use when ordering `EpisodesProductionCountry`."""
enum EpisodesProductionCountriesOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type EpisodesProductionCountry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  episodeId: Int!
  name: String!

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode
}

"""
A condition to be used against `EpisodesProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EpisodesProductionCountryCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `EpisodesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesProductionCountryFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesProductionCountryFilter!]

  """Negates the expression."""
  not: EpisodesProductionCountryFilter
}

"""An input for mutations affecting `EpisodesProductionCountry`"""
input EpisodesProductionCountryInput {
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `EpisodesProductionCountry`. Fields that are set will be updated.
"""
input EpisodesProductionCountryPatch {
  episodeId: Int

  """@notEmpty()"""
  name: String
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type EpisodesTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  episodeId: Int!
  name: String!

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode
}

"""
A condition to be used against `EpisodesTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EpisodesTagCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `EpisodesTag` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesTagFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesTagFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesTagFilter!]

  """Negates the expression."""
  not: EpisodesTagFilter
}

"""An input for mutations affecting `EpisodesTag`"""
input EpisodesTagInput {
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `EpisodesTag`. Fields that are set will be updated.
"""
input EpisodesTagPatch {
  episodeId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `EpisodesTag` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesTagsConnection {
  """A list of `EpisodesTag` objects."""
  nodes: [EpisodesTag]!

  """
  A list of edges which contains the `EpisodesTag` and cursor to aid in pagination.
  """
  edges: [EpisodesTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EpisodesTag` you could get from the connection."""
  totalCount: Int!
}

"""A `EpisodesTag` edge in the connection."""
type EpisodesTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesTag` at the end of the edge."""
  node: EpisodesTag
}

"""Methods to use when ordering `EpisodesTag`."""
enum EpisodesTagsOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type EpisodesTrailer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  episodeId: Int!
  videoId: Int!

  """Reads a single `Episode` that is related to this `EpisodesTrailer`."""
  episode: Episode
}

"""
A condition to be used against `EpisodesTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EpisodesTrailerCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: Int
}

"""
A filter to be used against `EpisodesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesTrailerFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: IntFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Checks for all expressions in this list."""
  and: [EpisodesTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesTrailerFilter!]

  """Negates the expression."""
  not: EpisodesTrailerFilter
}

"""An input for mutations affecting `EpisodesTrailer`"""
input EpisodesTrailerInput {
  episodeId: Int!
  videoId: Int!
}

"""
Represents an update to a `EpisodesTrailer`. Fields that are set will be updated.
"""
input EpisodesTrailerPatch {
  episodeId: Int
  videoId: Int
}

"""
A connection to a list of `EpisodesTrailer` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesTrailersConnection {
  """A list of `EpisodesTrailer` objects."""
  nodes: [EpisodesTrailer]!

  """
  A list of edges which contains the `EpisodesTrailer` and cursor to aid in pagination.
  """
  edges: [EpisodesTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesTrailer` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EpisodesTrailer` edge in the connection."""
type EpisodesTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesTrailer` at the end of the edge."""
  node: EpisodesTrailer
}

"""Methods to use when ordering `EpisodesTrailer`."""
enum EpisodesTrailersOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type EpisodesTvshowGenre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  episodeId: Int!
  tvshowGenresId: Int!

  """
  Reads a single `Episode` that is related to this `EpisodesTvshowGenre`.
  """
  episode: Episode

  """
  Reads a single `TvshowGenre` that is related to this `EpisodesTvshowGenre`.
  """
  tvshowGenres: TvshowGenre
}

"""
A condition to be used against `EpisodesTvshowGenre` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EpisodesTvshowGenreCondition {
  """Checks for equality with the object’s `episodeId` field."""
  episodeId: Int

  """Checks for equality with the object’s `tvshowGenresId` field."""
  tvshowGenresId: Int
}

"""
A filter to be used against `EpisodesTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input EpisodesTvshowGenreFilter {
  """Filter by the object’s `episodeId` field."""
  episodeId: IntFilter

  """Filter by the object’s `tvshowGenresId` field."""
  tvshowGenresId: IntFilter

  """Filter by the object’s `episode` relation."""
  episode: EpisodeFilter

  """Filter by the object’s `tvshowGenres` relation."""
  tvshowGenres: TvshowGenreFilter

  """Checks for all expressions in this list."""
  and: [EpisodesTvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [EpisodesTvshowGenreFilter!]

  """Negates the expression."""
  not: EpisodesTvshowGenreFilter
}

"""An input for mutations affecting `EpisodesTvshowGenre`"""
input EpisodesTvshowGenreInput {
  episodeId: Int!
  tvshowGenresId: Int!
}

"""
Represents an update to a `EpisodesTvshowGenre`. Fields that are set will be updated.
"""
input EpisodesTvshowGenrePatch {
  episodeId: Int
  tvshowGenresId: Int
}

"""
A connection to a list of `EpisodesTvshowGenre` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type EpisodesTvshowGenresConnection {
  """A list of `EpisodesTvshowGenre` objects."""
  nodes: [EpisodesTvshowGenre]!

  """
  A list of edges which contains the `EpisodesTvshowGenre` and cursor to aid in pagination.
  """
  edges: [EpisodesTvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpisodesTvshowGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EpisodesTvshowGenre` edge in the connection."""
type EpisodesTvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodesTvshowGenre` at the end of the edge."""
  node: EpisodesTvshowGenre
}

"""Methods to use when ordering `EpisodesTvshowGenre`."""
enum EpisodesTvshowGenresOrderBy {
  NATURAL
  EPISODE_ID_ASC
  EPISODE_ID_DESC
  TVSHOW_GENRES_ID_ASC
  TVSHOW_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EpisodeSubscriptionPayload {
  id: Int!
  episode: Episode
  event: String
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `EpisodesCast` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesCastFilter {
  """
  Every related `EpisodesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesCastFilter

  """
  Some related `EpisodesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesCastFilter

  """
  No related `EpisodesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesCastFilter
}

"""
A filter to be used against many `EpisodesImage` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesImageFilter {
  """
  Every related `EpisodesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesImageFilter

  """
  Some related `EpisodesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesImageFilter

  """
  No related `EpisodesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesImageFilter
}

"""
A filter to be used against many `EpisodesLicense` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesLicenseFilter {
  """
  Every related `EpisodesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesLicenseFilter

  """
  Some related `EpisodesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesLicenseFilter

  """
  No related `EpisodesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesLicenseFilter
}

"""
A filter to be used against many `EpisodesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesProductionCountryFilter {
  """
  Every related `EpisodesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesProductionCountryFilter

  """
  Some related `EpisodesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesProductionCountryFilter

  """
  No related `EpisodesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesProductionCountryFilter
}

"""
A filter to be used against many `EpisodesTag` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesTagFilter {
  """
  Every related `EpisodesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTagFilter

  """
  Some related `EpisodesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTagFilter

  """
  No related `EpisodesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTagFilter
}

"""
A filter to be used against many `EpisodesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesTrailerFilter {
  """
  Every related `EpisodesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTrailerFilter

  """
  Some related `EpisodesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTrailerFilter

  """
  No related `EpisodesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTrailerFilter
}

"""
A filter to be used against many `EpisodesTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input EpisodeToManyEpisodesTvshowGenreFilter {
  """
  Every related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTvshowGenreFilter

  """
  Some related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTvshowGenreFilter

  """
  No related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTvshowGenreFilter
}

"""A `CollectionEntity` edge in the connection."""
type GetCollectionEntityValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionEntity` at the end of the edge."""
  node: CollectionEntity
}

"""A connection to a list of `CollectionEntity` values."""
type GetCollectionEntityValuesConnection {
  """A list of `CollectionEntity` objects."""
  nodes: [CollectionEntity]!

  """
  A list of edges which contains the `CollectionEntity` and cursor to aid in pagination.
  """
  edges: [GetCollectionEntityValueEdge!]!

  """
  The count of *all* `CollectionEntity` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CollectionImageType` edge in the connection."""
type GetCollectionImageTypeValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionImageType` at the end of the edge."""
  node: CollectionImageType
}

"""A connection to a list of `CollectionImageType` values."""
type GetCollectionImageTypeValuesConnection {
  """A list of `CollectionImageType` objects."""
  nodes: [CollectionImageType]!

  """
  A list of edges which contains the `CollectionImageType` and cursor to aid in pagination.
  """
  edges: [GetCollectionImageTypeValueEdge!]!

  """
  The count of *all* `CollectionImageType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CollectionType` edge in the connection."""
type GetCollectionTypeValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CollectionType` at the end of the edge."""
  node: CollectionType
}

"""A connection to a list of `CollectionType` values."""
type GetCollectionTypeValuesConnection {
  """A list of `CollectionType` objects."""
  nodes: [CollectionType]!

  """
  A list of edges which contains the `CollectionType` and cursor to aid in pagination.
  """
  edges: [GetCollectionTypeValueEdge!]!

  """The count of *all* `CollectionType` you could get from the connection."""
  totalCount: Int!
}

"""A `EpisodeImageType` edge in the connection."""
type GetEpisodeImageTypeValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpisodeImageType` at the end of the edge."""
  node: EpisodeImageType
}

"""A connection to a list of `EpisodeImageType` values."""
type GetEpisodeImageTypeValuesConnection {
  """A list of `EpisodeImageType` objects."""
  nodes: [EpisodeImageType]!

  """
  A list of edges which contains the `EpisodeImageType` and cursor to aid in pagination.
  """
  edges: [GetEpisodeImageTypeValueEdge!]!

  """
  The count of *all* `EpisodeImageType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `IsoAlphaThreeCountryCodes` edge in the connection."""
type GetIsoAlphaThreeCountryCodesValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IsoAlphaThreeCountryCodes` at the end of the edge."""
  node: IsoAlphaThreeCountryCodes
}

"""A connection to a list of `IsoAlphaThreeCountryCodes` values."""
type GetIsoAlphaThreeCountryCodesValuesConnection {
  """A list of `IsoAlphaThreeCountryCodes` objects."""
  nodes: [IsoAlphaThreeCountryCodes]!

  """
  A list of edges which contains the `IsoAlphaThreeCountryCodes` and cursor to aid in pagination.
  """
  edges: [GetIsoAlphaThreeCountryCodesValueEdge!]!

  """
  The count of *all* `IsoAlphaThreeCountryCodes` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MovieImageType` edge in the connection."""
type GetMovieImageTypeValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MovieImageType` at the end of the edge."""
  node: MovieImageType
}

"""A connection to a list of `MovieImageType` values."""
type GetMovieImageTypeValuesConnection {
  """A list of `MovieImageType` objects."""
  nodes: [MovieImageType]!

  """
  A list of edges which contains the `MovieImageType` and cursor to aid in pagination.
  """
  edges: [GetMovieImageTypeValueEdge!]!

  """The count of *all* `MovieImageType` you could get from the connection."""
  totalCount: Int!
}

"""A `PublishStatus` edge in the connection."""
type GetPublishStatusValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublishStatus` at the end of the edge."""
  node: PublishStatus
}

"""A connection to a list of `PublishStatus` values."""
type GetPublishStatusValuesConnection {
  """A list of `PublishStatus` objects."""
  nodes: [PublishStatus]!

  """
  A list of edges which contains the `PublishStatus` and cursor to aid in pagination.
  """
  edges: [GetPublishStatusValueEdge!]!

  """The count of *all* `PublishStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `SeasonImageType` edge in the connection."""
type GetSeasonImageTypeValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonImageType` at the end of the edge."""
  node: SeasonImageType
}

"""A connection to a list of `SeasonImageType` values."""
type GetSeasonImageTypeValuesConnection {
  """A list of `SeasonImageType` objects."""
  nodes: [SeasonImageType]!

  """
  A list of edges which contains the `SeasonImageType` and cursor to aid in pagination.
  """
  edges: [GetSeasonImageTypeValueEdge!]!

  """
  The count of *all* `SeasonImageType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TvshowImageType` edge in the connection."""
type GetTvshowImageTypeValueEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowImageType` at the end of the edge."""
  node: TvshowImageType
}

"""A connection to a list of `TvshowImageType` values."""
type GetTvshowImageTypeValuesConnection {
  """A list of `TvshowImageType` objects."""
  nodes: [TvshowImageType]!

  """
  A list of edges which contains the `TvshowImageType` and cursor to aid in pagination.
  """
  edges: [GetTvshowImageTypeValueEdge!]!

  """
  The count of *all* `TvshowImageType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

enum IsoAlphaThreeCountryCodes {
  ABW
  AFG
  AGO
  AIA
  ALA
  ALB
  AND
  ARE
  ARG
  ARM
  ASM
  ATA
  ATF
  ATG
  AUS
  AUT
  AZE
  BDI
  BEL
  BEN
  BES
  BFA
  BGD
  BGR
  BHR
  BHS
  BIH
  BLM
  BLR
  BLZ
  BMU
  BOL
  BRA
  BRB
  BRN
  BTN
  BVT
  BWA
  CAF
  CAN
  CCK
  CHE
  CHL
  CHN
  CIV
  CMR
  COD
  COG
  COK
  COL
  COM
  CPV
  CRI
  CUB
  CUW
  CXR
  CYM
  CYP
  CZE
  DEU
  DJI
  DMA
  DNK
  DOM
  DZA
  ECU
  EGY
  ERI
  ESH
  ESP
  EST
  ETH
  FIN
  FJI
  FLK
  FRA
  FRO
  FSM
  GAB
  GBR
  GEO
  GGY
  GHA
  GIB
  GIN
  GLP
  GMB
  GNB
  GNQ
  GRC
  GRD
  GRL
  GTM
  GUF
  GUM
  GUY
  HKG
  HMD
  HND
  HRV
  HTI
  HUN
  IDN
  IMN
  IND
  IOT
  IRL
  IRN
  IRQ
  ISL
  ISR
  ITA
  JAM
  JEY
  JOR
  JPN
  KAZ
  KEN
  KGZ
  KHM
  KIR
  KNA
  KOR
  KWT
  LAO
  LBN
  LBR
  LBY
  LCA
  LIE
  LKA
  LSO
  LTU
  LUX
  LVA
  MAC
  MAF
  MAR
  MCO
  MDA
  MDG
  MDV
  MEX
  MHL
  MKD
  MLI
  MLT
  MMR
  MNE
  MNG
  MNP
  MOZ
  MRT
  MSR
  MTQ
  MUS
  MWI
  MYS
  MYT
  NAM
  NCL
  NER
  NFK
  NGA
  NIC
  NIU
  NLD
  NOR
  NPL
  NRU
  NZL
  OMN
  PAK
  PAN
  PCN
  PER
  PHL
  PLW
  PNG
  POL
  PRI
  PRK
  PRT
  PRY
  PSE
  PYF
  QAT
  REU
  ROU
  RUS
  RWA
  SAU
  SDN
  SEN
  SGP
  SGS
  SHN
  SJM
  SLB
  SLE
  SLV
  SMR
  SOM
  SPM
  SRB
  SSD
  STP
  SUR
  SVK
  SVN
  SWE
  SWZ
  SXM
  SYC
  SYR
  TCA
  TCD
  TGO
  THA
  TJK
  TKL
  TKM
  TLS
  TON
  TTO
  TUN
  TUR
  TUV
  TWN
  TZA
  UGA
  UKR
  UMI
  URY
  USA
  UZB
  VAT
  VCT
  VEN
  VGB
  VIR
  VNM
  VUT
  WLF
  WSM
  YEM
  ZAF
  ZMB
  ZWE
}

"""
A filter to be used against IsoAlphaThreeCountryCodes List fields. All fields are combined with a logical ‘and.’
"""
input IsoAlphaThreeCountryCodesListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [IsoAlphaThreeCountryCodes]

  """Not equal to the specified value."""
  notEqualTo: [IsoAlphaThreeCountryCodes]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [IsoAlphaThreeCountryCodes]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [IsoAlphaThreeCountryCodes]

  """Less than the specified value."""
  lessThan: [IsoAlphaThreeCountryCodes]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [IsoAlphaThreeCountryCodes]

  """Greater than the specified value."""
  greaterThan: [IsoAlphaThreeCountryCodes]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [IsoAlphaThreeCountryCodes]

  """Contains the specified list of values."""
  contains: [IsoAlphaThreeCountryCodes]

  """Contained by the specified list of values."""
  containedBy: [IsoAlphaThreeCountryCodes]

  """Overlaps the specified list of values."""
  overlaps: [IsoAlphaThreeCountryCodes]

  """Any array item is equal to the specified value."""
  anyEqualTo: IsoAlphaThreeCountryCodes

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: IsoAlphaThreeCountryCodes

  """Any array item is less than the specified value."""
  anyLessThan: IsoAlphaThreeCountryCodes

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: IsoAlphaThreeCountryCodes

  """Any array item is greater than the specified value."""
  anyGreaterThan: IsoAlphaThreeCountryCodes

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: IsoAlphaThreeCountryCodes
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type Movie implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: Int
  publishStatus: PublishStatus
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads and enables pagination through a set of `MoviesTag`."""
  moviesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTagFilter
  ): MoviesTagsConnection!

  """Reads and enables pagination through a set of `MoviesCast`."""
  moviesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesCastFilter
  ): MoviesCastsConnection!

  """Reads and enables pagination through a set of `MoviesLicense`."""
  moviesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesLicenseFilter
  ): MoviesLicensesConnection!

  """
  Reads and enables pagination through a set of `MoviesProductionCountry`.
  """
  moviesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesProductionCountryFilter
  ): MoviesProductionCountriesConnection!

  """Reads and enables pagination through a set of `MoviesMovieGenre`."""
  moviesMovieGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesMovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesMovieGenreFilter
  ): MoviesMovieGenresConnection!

  """Reads and enables pagination through a set of `MoviesImage`."""
  moviesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesImageFilter
  ): MoviesImagesConnection!

  """Reads and enables pagination through a set of `MoviesTrailer`."""
  moviesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTrailerFilter
  ): MoviesTrailersConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!
}

"""
A condition to be used against `Movie` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MovieCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `originalTitle` field."""
  originalTitle: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `mainVideoId` field."""
  mainVideoId: Int

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `Movie` object types. All fields are combined with a logical ‘and.’
"""
input MovieFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `originalTitle` field."""
  originalTitle: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `mainVideoId` field."""
  mainVideoId: IntFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `moviesTags` relation."""
  moviesTags: MovieToManyMoviesTagFilter

  """Some related `moviesTags` exist."""
  moviesTagsExist: Boolean

  """Filter by the object’s `moviesCasts` relation."""
  moviesCasts: MovieToManyMoviesCastFilter

  """Some related `moviesCasts` exist."""
  moviesCastsExist: Boolean

  """Filter by the object’s `moviesLicenses` relation."""
  moviesLicenses: MovieToManyMoviesLicenseFilter

  """Some related `moviesLicenses` exist."""
  moviesLicensesExist: Boolean

  """Filter by the object’s `moviesProductionCountries` relation."""
  moviesProductionCountries: MovieToManyMoviesProductionCountryFilter

  """Some related `moviesProductionCountries` exist."""
  moviesProductionCountriesExist: Boolean

  """Filter by the object’s `moviesMovieGenres` relation."""
  moviesMovieGenres: MovieToManyMoviesMovieGenreFilter

  """Some related `moviesMovieGenres` exist."""
  moviesMovieGenresExist: Boolean

  """Filter by the object’s `moviesImages` relation."""
  moviesImages: MovieToManyMoviesImageFilter

  """Some related `moviesImages` exist."""
  moviesImagesExist: Boolean

  """Filter by the object’s `moviesTrailers` relation."""
  moviesTrailers: MovieToManyMoviesTrailerFilter

  """Some related `moviesTrailers` exist."""
  moviesTrailersExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: MovieToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Checks for all expressions in this list."""
  and: [MovieFilter!]

  """Checks for any expressions in this list."""
  or: [MovieFilter!]

  """Negates the expression."""
  not: MovieFilter
}

"""@permissions: SETTINGS_READER,SETTINGS_EDITOR,ADMIN"""
type MovieGenre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  sortOrder: Int!
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads and enables pagination through a set of `MoviesMovieGenre`."""
  moviesMovieGenresByMovieGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesMovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesMovieGenreFilter
  ): MoviesMovieGenresConnection!
}

"""
A condition to be used against `MovieGenre` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MovieGenreCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(50)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `sortOrder` field."""
  sortOrder: Int

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `MovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MovieGenreFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `sortOrder` field."""
  sortOrder: IntFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `moviesMovieGenresByMovieGenresId` relation."""
  moviesMovieGenresByMovieGenresId: MovieGenreToManyMoviesMovieGenreFilter

  """Some related `moviesMovieGenresByMovieGenresId` exist."""
  moviesMovieGenresByMovieGenresIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [MovieGenreFilter!]

  """Checks for any expressions in this list."""
  or: [MovieGenreFilter!]

  """Negates the expression."""
  not: MovieGenreFilter
}

"""An input for mutations affecting `MovieGenre`"""
input MovieGenreInput {
  """
  @maxLength(50)
  @notEmpty()
  """
  title: String!
  sortOrder: Int!
}

"""
Represents an update to a `MovieGenre`. Fields that are set will be updated.
"""
input MovieGenrePatch {
  """
  @maxLength(50)
  @notEmpty()
  """
  title: String
  sortOrder: Int
}

"""
A connection to a list of `MovieGenre` values.
@permissions: SETTINGS_READER,SETTINGS_EDITOR,ADMIN
"""
type MovieGenresConnection {
  """A list of `MovieGenre` objects."""
  nodes: [MovieGenre]!

  """
  A list of edges which contains the `MovieGenre` and cursor to aid in pagination.
  """
  edges: [MovieGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MovieGenre` you could get from the connection."""
  totalCount: Int!
}

"""A `MovieGenre` edge in the connection."""
type MovieGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MovieGenre` at the end of the edge."""
  node: MovieGenre
}

"""Methods to use when ordering `MovieGenre`."""
enum MovieGenresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  SORT_ORDER_ASC
  SORT_ORDER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MovieGenreSubscriptionPayload {
  id: Int!
  movieGenre: MovieGenre
  event: String
}

"""
A filter to be used against many `MoviesMovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MovieGenreToManyMoviesMovieGenreFilter {
  """
  Every related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesMovieGenreFilter

  """
  Some related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesMovieGenreFilter

  """
  No related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesMovieGenreFilter
}

enum MovieImageType {
  COVER
  TEASER
}

"""
A filter to be used against MovieImageType fields. All fields are combined with a logical ‘and.’
"""
input MovieImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: MovieImageType

  """Not equal to the specified value."""
  notEqualTo: MovieImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: MovieImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: MovieImageType

  """Included in the specified list."""
  in: [MovieImageType!]

  """Not included in the specified list."""
  notIn: [MovieImageType!]

  """Less than the specified value."""
  lessThan: MovieImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: MovieImageType

  """Greater than the specified value."""
  greaterThan: MovieImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: MovieImageType
}

"""An input for mutations affecting `Movie`"""
input MovieInput {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: Int
}

"""
Represents an update to a `Movie`. Fields that are set will be updated.
"""
input MoviePatch {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  mainVideoId: Int
  publishStatus: PublishStatus
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type MoviesCast implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  movieId: Int!
  name: String!

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie
}

"""
A condition to be used against `MoviesCast` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MoviesCastCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `MoviesCast` object types. All fields are combined with a logical ‘and.’
"""
input MoviesCastFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesCastFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesCastFilter!]

  """Negates the expression."""
  not: MoviesCastFilter
}

"""An input for mutations affecting `MoviesCast`"""
input MoviesCastInput {
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `MoviesCast`. Fields that are set will be updated.
"""
input MoviesCastPatch {
  movieId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `MoviesCast` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesCastsConnection {
  """A list of `MoviesCast` objects."""
  nodes: [MoviesCast]!

  """
  A list of edges which contains the `MoviesCast` and cursor to aid in pagination.
  """
  edges: [MoviesCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesCast` you could get from the connection."""
  totalCount: Int!
}

"""A `MoviesCast` edge in the connection."""
type MoviesCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesCast` at the end of the edge."""
  node: MoviesCast
}

"""Methods to use when ordering `MoviesCast`."""
enum MoviesCastsOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `Movie` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesConnection {
  """A list of `Movie` objects."""
  nodes: [Movie]!

  """
  A list of edges which contains the `Movie` and cursor to aid in pagination.
  """
  edges: [MoviesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Movie` you could get from the connection."""
  totalCount: Int!
}

"""A `Movie` edge in the connection."""
type MoviesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Movie` at the end of the edge."""
  node: Movie
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type MoviesImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  movieId: Int!
  imageId: Int!
  imageType: MovieImageType!

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie
}

"""
A condition to be used against `MoviesImage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MoviesImageCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `imageType` field."""
  imageType: MovieImageType
}

"""
A filter to be used against `MoviesImage` object types. All fields are combined with a logical ‘and.’
"""
input MoviesImageFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Filter by the object’s `imageType` field."""
  imageType: MovieImageTypeFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesImageFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesImageFilter!]

  """Negates the expression."""
  not: MoviesImageFilter
}

"""An input for mutations affecting `MoviesImage`"""
input MoviesImageInput {
  movieId: Int!
  imageId: Int!
  imageType: MovieImageType!
}

"""
Represents an update to a `MoviesImage`. Fields that are set will be updated.
"""
input MoviesImagePatch {
  movieId: Int
  imageId: Int
  imageType: MovieImageType
}

"""
A connection to a list of `MoviesImage` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesImagesConnection {
  """A list of `MoviesImage` objects."""
  nodes: [MoviesImage]!

  """
  A list of edges which contains the `MoviesImage` and cursor to aid in pagination.
  """
  edges: [MoviesImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesImage` you could get from the connection."""
  totalCount: Int!
}

"""A `MoviesImage` edge in the connection."""
type MoviesImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesImage` at the end of the edge."""
  node: MoviesImage
}

"""Methods to use when ordering `MoviesImage`."""
enum MoviesImagesOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type MoviesLicense implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  movieId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie
}

"""
A condition to be used against `MoviesLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MoviesLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `countries` field."""
  countries: [IsoAlphaThreeCountryCodes]

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `MoviesLicense` object types. All fields are combined with a logical ‘and.’
"""
input MoviesLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `countries` field."""
  countries: IsoAlphaThreeCountryCodesListFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesLicenseFilter!]

  """Negates the expression."""
  not: MoviesLicenseFilter
}

"""An input for mutations affecting `MoviesLicense`"""
input MoviesLicenseInput {
  movieId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
Represents an update to a `MoviesLicense`. Fields that are set will be updated.
"""
input MoviesLicensePatch {
  movieId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
A connection to a list of `MoviesLicense` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesLicensesConnection {
  """A list of `MoviesLicense` objects."""
  nodes: [MoviesLicense]!

  """
  A list of edges which contains the `MoviesLicense` and cursor to aid in pagination.
  """
  edges: [MoviesLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesLicense` you could get from the connection."""
  totalCount: Int!
}

"""A `MoviesLicense` edge in the connection."""
type MoviesLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesLicense` at the end of the edge."""
  node: MoviesLicense
}

"""Methods to use when ordering `MoviesLicense`."""
enum MoviesLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  COUNTRIES_ASC
  COUNTRIES_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type MoviesMovieGenre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  movieId: Int!
  movieGenresId: Int!

  """Reads a single `Movie` that is related to this `MoviesMovieGenre`."""
  movie: Movie

  """
  Reads a single `MovieGenre` that is related to this `MoviesMovieGenre`.
  """
  movieGenres: MovieGenre
}

"""
A condition to be used against `MoviesMovieGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MoviesMovieGenreCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `movieGenresId` field."""
  movieGenresId: Int
}

"""
A filter to be used against `MoviesMovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MoviesMovieGenreFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `movieGenresId` field."""
  movieGenresId: IntFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Filter by the object’s `movieGenres` relation."""
  movieGenres: MovieGenreFilter

  """Checks for all expressions in this list."""
  and: [MoviesMovieGenreFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesMovieGenreFilter!]

  """Negates the expression."""
  not: MoviesMovieGenreFilter
}

"""An input for mutations affecting `MoviesMovieGenre`"""
input MoviesMovieGenreInput {
  movieId: Int!
  movieGenresId: Int!
}

"""
Represents an update to a `MoviesMovieGenre`. Fields that are set will be updated.
"""
input MoviesMovieGenrePatch {
  movieId: Int
  movieGenresId: Int
}

"""
A connection to a list of `MoviesMovieGenre` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesMovieGenresConnection {
  """A list of `MoviesMovieGenre` objects."""
  nodes: [MoviesMovieGenre]!

  """
  A list of edges which contains the `MoviesMovieGenre` and cursor to aid in pagination.
  """
  edges: [MoviesMovieGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MoviesMovieGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MoviesMovieGenre` edge in the connection."""
type MoviesMovieGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesMovieGenre` at the end of the edge."""
  node: MoviesMovieGenre
}

"""Methods to use when ordering `MoviesMovieGenre`."""
enum MoviesMovieGenresOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  MOVIE_GENRES_ID_ASC
  MOVIE_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Movie`."""
enum MoviesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ORIGINAL_TITLE_ASC
  ORIGINAL_TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  MAIN_VIDEO_ID_ASC
  MAIN_VIDEO_ID_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `MoviesProductionCountry` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesProductionCountriesConnection {
  """A list of `MoviesProductionCountry` objects."""
  nodes: [MoviesProductionCountry]!

  """
  A list of edges which contains the `MoviesProductionCountry` and cursor to aid in pagination.
  """
  edges: [MoviesProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MoviesProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MoviesProductionCountry` edge in the connection."""
type MoviesProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesProductionCountry` at the end of the edge."""
  node: MoviesProductionCountry
}

"""Methods to use when ordering `MoviesProductionCountry`."""
enum MoviesProductionCountriesOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type MoviesProductionCountry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  movieId: Int!
  name: String!

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie
}

"""
A condition to be used against `MoviesProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MoviesProductionCountryCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `MoviesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input MoviesProductionCountryFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesProductionCountryFilter!]

  """Negates the expression."""
  not: MoviesProductionCountryFilter
}

"""An input for mutations affecting `MoviesProductionCountry`"""
input MoviesProductionCountryInput {
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `MoviesProductionCountry`. Fields that are set will be updated.
"""
input MoviesProductionCountryPatch {
  movieId: Int

  """@notEmpty()"""
  name: String
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type MoviesTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  movieId: Int!
  name: String!

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie
}

"""
A condition to be used against `MoviesTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MoviesTagCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `MoviesTag` object types. All fields are combined with a logical ‘and.’
"""
input MoviesTagFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesTagFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesTagFilter!]

  """Negates the expression."""
  not: MoviesTagFilter
}

"""An input for mutations affecting `MoviesTag`"""
input MoviesTagInput {
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `MoviesTag`. Fields that are set will be updated.
"""
input MoviesTagPatch {
  movieId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `MoviesTag` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesTagsConnection {
  """A list of `MoviesTag` objects."""
  nodes: [MoviesTag]!

  """
  A list of edges which contains the `MoviesTag` and cursor to aid in pagination.
  """
  edges: [MoviesTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesTag` you could get from the connection."""
  totalCount: Int!
}

"""A `MoviesTag` edge in the connection."""
type MoviesTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesTag` at the end of the edge."""
  node: MoviesTag
}

"""Methods to use when ordering `MoviesTag`."""
enum MoviesTagsOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN"""
type MoviesTrailer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  movieId: Int!
  videoId: Int!

  """Reads a single `Movie` that is related to this `MoviesTrailer`."""
  movie: Movie
}

"""
A condition to be used against `MoviesTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MoviesTrailerCondition {
  """Checks for equality with the object’s `movieId` field."""
  movieId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: Int
}

"""
A filter to be used against `MoviesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input MoviesTrailerFilter {
  """Filter by the object’s `movieId` field."""
  movieId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: IntFilter

  """Filter by the object’s `movie` relation."""
  movie: MovieFilter

  """Checks for all expressions in this list."""
  and: [MoviesTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [MoviesTrailerFilter!]

  """Negates the expression."""
  not: MoviesTrailerFilter
}

"""An input for mutations affecting `MoviesTrailer`"""
input MoviesTrailerInput {
  movieId: Int!
  videoId: Int!
}

"""
Represents an update to a `MoviesTrailer`. Fields that are set will be updated.
"""
input MoviesTrailerPatch {
  movieId: Int
  videoId: Int
}

"""
A connection to a list of `MoviesTrailer` values.
@permissions: MOVIE_READER,MOVIE_EDITOR,ADMIN
"""
type MoviesTrailersConnection {
  """A list of `MoviesTrailer` objects."""
  nodes: [MoviesTrailer]!

  """
  A list of edges which contains the `MoviesTrailer` and cursor to aid in pagination.
  """
  edges: [MoviesTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MoviesTrailer` you could get from the connection."""
  totalCount: Int!
}

"""A `MoviesTrailer` edge in the connection."""
type MoviesTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MoviesTrailer` at the end of the edge."""
  node: MoviesTrailer
}

"""Methods to use when ordering `MoviesTrailer`."""
enum MoviesTrailersOrderBy {
  NATURAL
  MOVIE_ID_ASC
  MOVIE_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MovieSubscriptionPayload {
  id: Int!
  movie: Movie
  event: String
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `MoviesCast` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesCastFilter {
  """
  Every related `MoviesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesCastFilter

  """
  Some related `MoviesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesCastFilter

  """
  No related `MoviesCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesCastFilter
}

"""
A filter to be used against many `MoviesImage` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesImageFilter {
  """
  Every related `MoviesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesImageFilter

  """
  Some related `MoviesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesImageFilter

  """
  No related `MoviesImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesImageFilter
}

"""
A filter to be used against many `MoviesLicense` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesLicenseFilter {
  """
  Every related `MoviesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesLicenseFilter

  """
  Some related `MoviesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesLicenseFilter

  """
  No related `MoviesLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesLicenseFilter
}

"""
A filter to be used against many `MoviesMovieGenre` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesMovieGenreFilter {
  """
  Every related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesMovieGenreFilter

  """
  Some related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesMovieGenreFilter

  """
  No related `MoviesMovieGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesMovieGenreFilter
}

"""
A filter to be used against many `MoviesProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesProductionCountryFilter {
  """
  Every related `MoviesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesProductionCountryFilter

  """
  Some related `MoviesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesProductionCountryFilter

  """
  No related `MoviesProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesProductionCountryFilter
}

"""
A filter to be used against many `MoviesTag` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesTagFilter {
  """
  Every related `MoviesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesTagFilter

  """
  Some related `MoviesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesTagFilter

  """
  No related `MoviesTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesTagFilter
}

"""
A filter to be used against many `MoviesTrailer` object types. All fields are combined with a logical ‘and.’
"""
input MovieToManyMoviesTrailerFilter {
  """
  Every related `MoviesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MoviesTrailerFilter

  """
  Some related `MoviesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MoviesTrailerFilter

  """
  No related `MoviesTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MoviesTrailerFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `AutomaticCollectionsFilter`."""
  createAutomaticCollectionsFilter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAutomaticCollectionsFilterInput!
  ): CreateAutomaticCollectionsFilterPayload

  """Creates a single `CollectionRelation`."""
  createCollectionRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionRelationInput!
  ): CreateCollectionRelationPayload

  """Creates a single `Collection`."""
  createCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionInput!
  ): CreateCollectionPayload

  """Creates a single `CollectionsImage`."""
  createCollectionsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionsImageInput!
  ): CreateCollectionsImagePayload

  """Creates a single `CollectionsTag`."""
  createCollectionsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCollectionsTagInput!
  ): CreateCollectionsTagPayload

  """Creates a single `Episode`."""
  createEpisode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodeInput!
  ): CreateEpisodePayload

  """Creates a single `EpisodesCast`."""
  createEpisodesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesCastInput!
  ): CreateEpisodesCastPayload

  """Creates a single `EpisodesImage`."""
  createEpisodesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesImageInput!
  ): CreateEpisodesImagePayload

  """Creates a single `EpisodesLicense`."""
  createEpisodesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesLicenseInput!
  ): CreateEpisodesLicensePayload

  """Creates a single `EpisodesProductionCountry`."""
  createEpisodesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesProductionCountryInput!
  ): CreateEpisodesProductionCountryPayload

  """Creates a single `EpisodesTag`."""
  createEpisodesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesTagInput!
  ): CreateEpisodesTagPayload

  """Creates a single `EpisodesTrailer`."""
  createEpisodesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesTrailerInput!
  ): CreateEpisodesTrailerPayload

  """Creates a single `EpisodesTvshowGenre`."""
  createEpisodesTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEpisodesTvshowGenreInput!
  ): CreateEpisodesTvshowGenrePayload

  """Creates a single `MovieGenre`."""
  createMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMovieGenreInput!
  ): CreateMovieGenrePayload

  """Creates a single `Movie`."""
  createMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMovieInput!
  ): CreateMoviePayload

  """Creates a single `MoviesCast`."""
  createMoviesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesCastInput!
  ): CreateMoviesCastPayload

  """Creates a single `MoviesImage`."""
  createMoviesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesImageInput!
  ): CreateMoviesImagePayload

  """Creates a single `MoviesLicense`."""
  createMoviesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesLicenseInput!
  ): CreateMoviesLicensePayload

  """Creates a single `MoviesMovieGenre`."""
  createMoviesMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesMovieGenreInput!
  ): CreateMoviesMovieGenrePayload

  """Creates a single `MoviesProductionCountry`."""
  createMoviesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesProductionCountryInput!
  ): CreateMoviesProductionCountryPayload

  """Creates a single `MoviesTag`."""
  createMoviesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesTagInput!
  ): CreateMoviesTagPayload

  """Creates a single `MoviesTrailer`."""
  createMoviesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMoviesTrailerInput!
  ): CreateMoviesTrailerPayload

  """Creates a single `Season`."""
  createSeason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonInput!
  ): CreateSeasonPayload

  """Creates a single `SeasonsCast`."""
  createSeasonsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsCastInput!
  ): CreateSeasonsCastPayload

  """Creates a single `SeasonsImage`."""
  createSeasonsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsImageInput!
  ): CreateSeasonsImagePayload

  """Creates a single `SeasonsLicense`."""
  createSeasonsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsLicenseInput!
  ): CreateSeasonsLicensePayload

  """Creates a single `SeasonsProductionCountry`."""
  createSeasonsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsProductionCountryInput!
  ): CreateSeasonsProductionCountryPayload

  """Creates a single `SeasonsTag`."""
  createSeasonsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsTagInput!
  ): CreateSeasonsTagPayload

  """Creates a single `SeasonsTrailer`."""
  createSeasonsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsTrailerInput!
  ): CreateSeasonsTrailerPayload

  """Creates a single `SeasonsTvshowGenre`."""
  createSeasonsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSeasonsTvshowGenreInput!
  ): CreateSeasonsTvshowGenrePayload

  """Creates a single `TvshowGenre`."""
  createTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowGenreInput!
  ): CreateTvshowGenrePayload

  """Creates a single `Tvshow`."""
  createTvshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowInput!
  ): CreateTvshowPayload

  """Creates a single `TvshowsCast`."""
  createTvshowsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsCastInput!
  ): CreateTvshowsCastPayload

  """Creates a single `TvshowsImage`."""
  createTvshowsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsImageInput!
  ): CreateTvshowsImagePayload

  """Creates a single `TvshowsLicense`."""
  createTvshowsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsLicenseInput!
  ): CreateTvshowsLicensePayload

  """Creates a single `TvshowsProductionCountry`."""
  createTvshowsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsProductionCountryInput!
  ): CreateTvshowsProductionCountryPayload

  """Creates a single `TvshowsTag`."""
  createTvshowsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsTagInput!
  ): CreateTvshowsTagPayload

  """Creates a single `TvshowsTrailer`."""
  createTvshowsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsTrailerInput!
  ): CreateTvshowsTrailerPayload

  """Creates a single `TvshowsTvshowGenre`."""
  createTvshowsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTvshowsTvshowGenreInput!
  ): CreateTvshowsTvshowGenrePayload

  """
  Updates a single `AutomaticCollectionsFilter` using its globally unique id and a patch.
  """
  updateAutomaticCollectionsFilterByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAutomaticCollectionsFilterByNodeIdInput!
  ): UpdateAutomaticCollectionsFilterPayload

  """
  Updates a single `AutomaticCollectionsFilter` using a unique key and a patch.
  """
  updateAutomaticCollectionsFilter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAutomaticCollectionsFilterInput!
  ): UpdateAutomaticCollectionsFilterPayload

  """
  Updates a single `CollectionRelation` using its globally unique id and a patch.
  """
  updateCollectionRelationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionRelationByNodeIdInput!
  ): UpdateCollectionRelationPayload

  """Updates a single `CollectionRelation` using a unique key and a patch."""
  updateCollectionRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionRelationInput!
  ): UpdateCollectionRelationPayload

  """Updates a single `CollectionRelation` using a unique key and a patch."""
  updateCollectionRelationByCollectionIdAndMovieId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionRelationByCollectionIdAndMovieIdInput!
  ): UpdateCollectionRelationPayload

  """Updates a single `CollectionRelation` using a unique key and a patch."""
  updateCollectionRelationByCollectionIdAndTvshowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionRelationByCollectionIdAndTvshowIdInput!
  ): UpdateCollectionRelationPayload

  """Updates a single `CollectionRelation` using a unique key and a patch."""
  updateCollectionRelationByCollectionIdAndSeasonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionRelationByCollectionIdAndSeasonIdInput!
  ): UpdateCollectionRelationPayload

  """Updates a single `CollectionRelation` using a unique key and a patch."""
  updateCollectionRelationByCollectionIdAndEpisodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionRelationByCollectionIdAndEpisodeIdInput!
  ): UpdateCollectionRelationPayload

  """
  Updates a single `Collection` using its globally unique id and a patch.
  """
  updateCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByNodeIdInput!
  ): UpdateCollectionPayload

  """Updates a single `Collection` using a unique key and a patch."""
  updateCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionInput!
  ): UpdateCollectionPayload

  """Updates a single `Collection` using a unique key and a patch."""
  updateCollectionByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionByExternalIdInput!
  ): UpdateCollectionPayload

  """
  Updates a single `CollectionsImage` using its globally unique id and a patch.
  """
  updateCollectionsImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionsImageByNodeIdInput!
  ): UpdateCollectionsImagePayload

  """Updates a single `CollectionsImage` using a unique key and a patch."""
  updateCollectionsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionsImageInput!
  ): UpdateCollectionsImagePayload

  """
  Updates a single `CollectionsTag` using its globally unique id and a patch.
  """
  updateCollectionsTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionsTagByNodeIdInput!
  ): UpdateCollectionsTagPayload

  """Updates a single `CollectionsTag` using a unique key and a patch."""
  updateCollectionsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCollectionsTagInput!
  ): UpdateCollectionsTagPayload

  """Updates a single `Episode` using its globally unique id and a patch."""
  updateEpisodeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodeByNodeIdInput!
  ): UpdateEpisodePayload

  """Updates a single `Episode` using a unique key and a patch."""
  updateEpisode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodeInput!
  ): UpdateEpisodePayload

  """Updates a single `Episode` using a unique key and a patch."""
  updateEpisodeByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodeByExternalIdInput!
  ): UpdateEpisodePayload

  """
  Updates a single `EpisodesCast` using its globally unique id and a patch.
  """
  updateEpisodesCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesCastByNodeIdInput!
  ): UpdateEpisodesCastPayload

  """Updates a single `EpisodesCast` using a unique key and a patch."""
  updateEpisodesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesCastInput!
  ): UpdateEpisodesCastPayload

  """
  Updates a single `EpisodesImage` using its globally unique id and a patch.
  """
  updateEpisodesImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesImageByNodeIdInput!
  ): UpdateEpisodesImagePayload

  """Updates a single `EpisodesImage` using a unique key and a patch."""
  updateEpisodesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesImageInput!
  ): UpdateEpisodesImagePayload

  """
  Updates a single `EpisodesLicense` using its globally unique id and a patch.
  """
  updateEpisodesLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesLicenseByNodeIdInput!
  ): UpdateEpisodesLicensePayload

  """Updates a single `EpisodesLicense` using a unique key and a patch."""
  updateEpisodesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesLicenseInput!
  ): UpdateEpisodesLicensePayload

  """
  Updates a single `EpisodesProductionCountry` using its globally unique id and a patch.
  """
  updateEpisodesProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesProductionCountryByNodeIdInput!
  ): UpdateEpisodesProductionCountryPayload

  """
  Updates a single `EpisodesProductionCountry` using a unique key and a patch.
  """
  updateEpisodesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesProductionCountryInput!
  ): UpdateEpisodesProductionCountryPayload

  """
  Updates a single `EpisodesTag` using its globally unique id and a patch.
  """
  updateEpisodesTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesTagByNodeIdInput!
  ): UpdateEpisodesTagPayload

  """Updates a single `EpisodesTag` using a unique key and a patch."""
  updateEpisodesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesTagInput!
  ): UpdateEpisodesTagPayload

  """
  Updates a single `EpisodesTrailer` using its globally unique id and a patch.
  """
  updateEpisodesTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesTrailerByNodeIdInput!
  ): UpdateEpisodesTrailerPayload

  """Updates a single `EpisodesTrailer` using a unique key and a patch."""
  updateEpisodesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesTrailerInput!
  ): UpdateEpisodesTrailerPayload

  """
  Updates a single `EpisodesTvshowGenre` using its globally unique id and a patch.
  """
  updateEpisodesTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesTvshowGenreByNodeIdInput!
  ): UpdateEpisodesTvshowGenrePayload

  """Updates a single `EpisodesTvshowGenre` using a unique key and a patch."""
  updateEpisodesTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEpisodesTvshowGenreInput!
  ): UpdateEpisodesTvshowGenrePayload

  """
  Updates a single `MovieGenre` using its globally unique id and a patch.
  """
  updateMovieGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieGenreByNodeIdInput!
  ): UpdateMovieGenrePayload

  """Updates a single `MovieGenre` using a unique key and a patch."""
  updateMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieGenreInput!
  ): UpdateMovieGenrePayload

  """Updates a single `Movie` using its globally unique id and a patch."""
  updateMovieByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieByNodeIdInput!
  ): UpdateMoviePayload

  """Updates a single `Movie` using a unique key and a patch."""
  updateMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieInput!
  ): UpdateMoviePayload

  """Updates a single `Movie` using a unique key and a patch."""
  updateMovieByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMovieByExternalIdInput!
  ): UpdateMoviePayload

  """
  Updates a single `MoviesCast` using its globally unique id and a patch.
  """
  updateMoviesCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesCastByNodeIdInput!
  ): UpdateMoviesCastPayload

  """Updates a single `MoviesCast` using a unique key and a patch."""
  updateMoviesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesCastInput!
  ): UpdateMoviesCastPayload

  """
  Updates a single `MoviesImage` using its globally unique id and a patch.
  """
  updateMoviesImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesImageByNodeIdInput!
  ): UpdateMoviesImagePayload

  """Updates a single `MoviesImage` using a unique key and a patch."""
  updateMoviesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesImageInput!
  ): UpdateMoviesImagePayload

  """
  Updates a single `MoviesLicense` using its globally unique id and a patch.
  """
  updateMoviesLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesLicenseByNodeIdInput!
  ): UpdateMoviesLicensePayload

  """Updates a single `MoviesLicense` using a unique key and a patch."""
  updateMoviesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesLicenseInput!
  ): UpdateMoviesLicensePayload

  """
  Updates a single `MoviesMovieGenre` using its globally unique id and a patch.
  """
  updateMoviesMovieGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesMovieGenreByNodeIdInput!
  ): UpdateMoviesMovieGenrePayload

  """Updates a single `MoviesMovieGenre` using a unique key and a patch."""
  updateMoviesMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesMovieGenreInput!
  ): UpdateMoviesMovieGenrePayload

  """
  Updates a single `MoviesProductionCountry` using its globally unique id and a patch.
  """
  updateMoviesProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesProductionCountryByNodeIdInput!
  ): UpdateMoviesProductionCountryPayload

  """
  Updates a single `MoviesProductionCountry` using a unique key and a patch.
  """
  updateMoviesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesProductionCountryInput!
  ): UpdateMoviesProductionCountryPayload

  """Updates a single `MoviesTag` using its globally unique id and a patch."""
  updateMoviesTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesTagByNodeIdInput!
  ): UpdateMoviesTagPayload

  """Updates a single `MoviesTag` using a unique key and a patch."""
  updateMoviesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesTagInput!
  ): UpdateMoviesTagPayload

  """
  Updates a single `MoviesTrailer` using its globally unique id and a patch.
  """
  updateMoviesTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesTrailerByNodeIdInput!
  ): UpdateMoviesTrailerPayload

  """Updates a single `MoviesTrailer` using a unique key and a patch."""
  updateMoviesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMoviesTrailerInput!
  ): UpdateMoviesTrailerPayload

  """Updates a single `Season` using its globally unique id and a patch."""
  updateSeasonByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonByNodeIdInput!
  ): UpdateSeasonPayload

  """Updates a single `Season` using a unique key and a patch."""
  updateSeason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonInput!
  ): UpdateSeasonPayload

  """Updates a single `Season` using a unique key and a patch."""
  updateSeasonByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonByExternalIdInput!
  ): UpdateSeasonPayload

  """
  Updates a single `SeasonsCast` using its globally unique id and a patch.
  """
  updateSeasonsCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsCastByNodeIdInput!
  ): UpdateSeasonsCastPayload

  """Updates a single `SeasonsCast` using a unique key and a patch."""
  updateSeasonsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsCastInput!
  ): UpdateSeasonsCastPayload

  """
  Updates a single `SeasonsImage` using its globally unique id and a patch.
  """
  updateSeasonsImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsImageByNodeIdInput!
  ): UpdateSeasonsImagePayload

  """Updates a single `SeasonsImage` using a unique key and a patch."""
  updateSeasonsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsImageInput!
  ): UpdateSeasonsImagePayload

  """
  Updates a single `SeasonsLicense` using its globally unique id and a patch.
  """
  updateSeasonsLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsLicenseByNodeIdInput!
  ): UpdateSeasonsLicensePayload

  """Updates a single `SeasonsLicense` using a unique key and a patch."""
  updateSeasonsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsLicenseInput!
  ): UpdateSeasonsLicensePayload

  """
  Updates a single `SeasonsProductionCountry` using its globally unique id and a patch.
  """
  updateSeasonsProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsProductionCountryByNodeIdInput!
  ): UpdateSeasonsProductionCountryPayload

  """
  Updates a single `SeasonsProductionCountry` using a unique key and a patch.
  """
  updateSeasonsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsProductionCountryInput!
  ): UpdateSeasonsProductionCountryPayload

  """
  Updates a single `SeasonsTag` using its globally unique id and a patch.
  """
  updateSeasonsTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsTagByNodeIdInput!
  ): UpdateSeasonsTagPayload

  """Updates a single `SeasonsTag` using a unique key and a patch."""
  updateSeasonsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsTagInput!
  ): UpdateSeasonsTagPayload

  """
  Updates a single `SeasonsTrailer` using its globally unique id and a patch.
  """
  updateSeasonsTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsTrailerByNodeIdInput!
  ): UpdateSeasonsTrailerPayload

  """Updates a single `SeasonsTrailer` using a unique key and a patch."""
  updateSeasonsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsTrailerInput!
  ): UpdateSeasonsTrailerPayload

  """
  Updates a single `SeasonsTvshowGenre` using its globally unique id and a patch.
  """
  updateSeasonsTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsTvshowGenreByNodeIdInput!
  ): UpdateSeasonsTvshowGenrePayload

  """Updates a single `SeasonsTvshowGenre` using a unique key and a patch."""
  updateSeasonsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSeasonsTvshowGenreInput!
  ): UpdateSeasonsTvshowGenrePayload

  """
  Updates a single `TvshowGenre` using its globally unique id and a patch.
  """
  updateTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowGenreByNodeIdInput!
  ): UpdateTvshowGenrePayload

  """Updates a single `TvshowGenre` using a unique key and a patch."""
  updateTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowGenreInput!
  ): UpdateTvshowGenrePayload

  """Updates a single `Tvshow` using its globally unique id and a patch."""
  updateTvshowByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowByNodeIdInput!
  ): UpdateTvshowPayload

  """Updates a single `Tvshow` using a unique key and a patch."""
  updateTvshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowInput!
  ): UpdateTvshowPayload

  """Updates a single `Tvshow` using a unique key and a patch."""
  updateTvshowByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowByExternalIdInput!
  ): UpdateTvshowPayload

  """
  Updates a single `TvshowsCast` using its globally unique id and a patch.
  """
  updateTvshowsCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsCastByNodeIdInput!
  ): UpdateTvshowsCastPayload

  """Updates a single `TvshowsCast` using a unique key and a patch."""
  updateTvshowsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsCastInput!
  ): UpdateTvshowsCastPayload

  """
  Updates a single `TvshowsImage` using its globally unique id and a patch.
  """
  updateTvshowsImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsImageByNodeIdInput!
  ): UpdateTvshowsImagePayload

  """Updates a single `TvshowsImage` using a unique key and a patch."""
  updateTvshowsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsImageInput!
  ): UpdateTvshowsImagePayload

  """
  Updates a single `TvshowsLicense` using its globally unique id and a patch.
  """
  updateTvshowsLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsLicenseByNodeIdInput!
  ): UpdateTvshowsLicensePayload

  """Updates a single `TvshowsLicense` using a unique key and a patch."""
  updateTvshowsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsLicenseInput!
  ): UpdateTvshowsLicensePayload

  """
  Updates a single `TvshowsProductionCountry` using its globally unique id and a patch.
  """
  updateTvshowsProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsProductionCountryByNodeIdInput!
  ): UpdateTvshowsProductionCountryPayload

  """
  Updates a single `TvshowsProductionCountry` using a unique key and a patch.
  """
  updateTvshowsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsProductionCountryInput!
  ): UpdateTvshowsProductionCountryPayload

  """
  Updates a single `TvshowsTag` using its globally unique id and a patch.
  """
  updateTvshowsTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsTagByNodeIdInput!
  ): UpdateTvshowsTagPayload

  """Updates a single `TvshowsTag` using a unique key and a patch."""
  updateTvshowsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsTagInput!
  ): UpdateTvshowsTagPayload

  """
  Updates a single `TvshowsTrailer` using its globally unique id and a patch.
  """
  updateTvshowsTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsTrailerByNodeIdInput!
  ): UpdateTvshowsTrailerPayload

  """Updates a single `TvshowsTrailer` using a unique key and a patch."""
  updateTvshowsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsTrailerInput!
  ): UpdateTvshowsTrailerPayload

  """
  Updates a single `TvshowsTvshowGenre` using its globally unique id and a patch.
  """
  updateTvshowsTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsTvshowGenreByNodeIdInput!
  ): UpdateTvshowsTvshowGenrePayload

  """Updates a single `TvshowsTvshowGenre` using a unique key and a patch."""
  updateTvshowsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTvshowsTvshowGenreInput!
  ): UpdateTvshowsTvshowGenrePayload

  """
  Deletes a single `AutomaticCollectionsFilter` using its globally unique id.
  """
  deleteAutomaticCollectionsFilterByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAutomaticCollectionsFilterByNodeIdInput!
  ): DeleteAutomaticCollectionsFilterPayload

  """Deletes a single `AutomaticCollectionsFilter` using a unique key."""
  deleteAutomaticCollectionsFilter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAutomaticCollectionsFilterInput!
  ): DeleteAutomaticCollectionsFilterPayload

  """Deletes a single `CollectionRelation` using its globally unique id."""
  deleteCollectionRelationByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionRelationByNodeIdInput!
  ): DeleteCollectionRelationPayload

  """Deletes a single `CollectionRelation` using a unique key."""
  deleteCollectionRelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionRelationInput!
  ): DeleteCollectionRelationPayload

  """Deletes a single `CollectionRelation` using a unique key."""
  deleteCollectionRelationByCollectionIdAndMovieId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionRelationByCollectionIdAndMovieIdInput!
  ): DeleteCollectionRelationPayload

  """Deletes a single `CollectionRelation` using a unique key."""
  deleteCollectionRelationByCollectionIdAndTvshowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionRelationByCollectionIdAndTvshowIdInput!
  ): DeleteCollectionRelationPayload

  """Deletes a single `CollectionRelation` using a unique key."""
  deleteCollectionRelationByCollectionIdAndSeasonId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionRelationByCollectionIdAndSeasonIdInput!
  ): DeleteCollectionRelationPayload

  """Deletes a single `CollectionRelation` using a unique key."""
  deleteCollectionRelationByCollectionIdAndEpisodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionRelationByCollectionIdAndEpisodeIdInput!
  ): DeleteCollectionRelationPayload

  """Deletes a single `Collection` using its globally unique id."""
  deleteCollectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByNodeIdInput!
  ): DeleteCollectionPayload

  """Deletes a single `Collection` using a unique key."""
  deleteCollection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionInput!
  ): DeleteCollectionPayload

  """Deletes a single `Collection` using a unique key."""
  deleteCollectionByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionByExternalIdInput!
  ): DeleteCollectionPayload

  """Deletes a single `CollectionsImage` using its globally unique id."""
  deleteCollectionsImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionsImageByNodeIdInput!
  ): DeleteCollectionsImagePayload

  """Deletes a single `CollectionsImage` using a unique key."""
  deleteCollectionsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionsImageInput!
  ): DeleteCollectionsImagePayload

  """Deletes a single `CollectionsTag` using its globally unique id."""
  deleteCollectionsTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionsTagByNodeIdInput!
  ): DeleteCollectionsTagPayload

  """Deletes a single `CollectionsTag` using a unique key."""
  deleteCollectionsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCollectionsTagInput!
  ): DeleteCollectionsTagPayload

  """Deletes a single `Episode` using its globally unique id."""
  deleteEpisodeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodeByNodeIdInput!
  ): DeleteEpisodePayload

  """Deletes a single `Episode` using a unique key."""
  deleteEpisode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodeInput!
  ): DeleteEpisodePayload

  """Deletes a single `Episode` using a unique key."""
  deleteEpisodeByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodeByExternalIdInput!
  ): DeleteEpisodePayload

  """Deletes a single `EpisodesCast` using its globally unique id."""
  deleteEpisodesCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesCastByNodeIdInput!
  ): DeleteEpisodesCastPayload

  """Deletes a single `EpisodesCast` using a unique key."""
  deleteEpisodesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesCastInput!
  ): DeleteEpisodesCastPayload

  """Deletes a single `EpisodesImage` using its globally unique id."""
  deleteEpisodesImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesImageByNodeIdInput!
  ): DeleteEpisodesImagePayload

  """Deletes a single `EpisodesImage` using a unique key."""
  deleteEpisodesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesImageInput!
  ): DeleteEpisodesImagePayload

  """Deletes a single `EpisodesLicense` using its globally unique id."""
  deleteEpisodesLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesLicenseByNodeIdInput!
  ): DeleteEpisodesLicensePayload

  """Deletes a single `EpisodesLicense` using a unique key."""
  deleteEpisodesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesLicenseInput!
  ): DeleteEpisodesLicensePayload

  """
  Deletes a single `EpisodesProductionCountry` using its globally unique id.
  """
  deleteEpisodesProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesProductionCountryByNodeIdInput!
  ): DeleteEpisodesProductionCountryPayload

  """Deletes a single `EpisodesProductionCountry` using a unique key."""
  deleteEpisodesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesProductionCountryInput!
  ): DeleteEpisodesProductionCountryPayload

  """Deletes a single `EpisodesTag` using its globally unique id."""
  deleteEpisodesTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTagByNodeIdInput!
  ): DeleteEpisodesTagPayload

  """Deletes a single `EpisodesTag` using a unique key."""
  deleteEpisodesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTagInput!
  ): DeleteEpisodesTagPayload

  """Deletes a single `EpisodesTrailer` using its globally unique id."""
  deleteEpisodesTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTrailerByNodeIdInput!
  ): DeleteEpisodesTrailerPayload

  """Deletes a single `EpisodesTrailer` using a unique key."""
  deleteEpisodesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTrailerInput!
  ): DeleteEpisodesTrailerPayload

  """Deletes a single `EpisodesTvshowGenre` using its globally unique id."""
  deleteEpisodesTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTvshowGenreByNodeIdInput!
  ): DeleteEpisodesTvshowGenrePayload

  """Deletes a single `EpisodesTvshowGenre` using a unique key."""
  deleteEpisodesTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEpisodesTvshowGenreInput!
  ): DeleteEpisodesTvshowGenrePayload

  """Deletes a single `MovieGenre` using its globally unique id."""
  deleteMovieGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieGenreByNodeIdInput!
  ): DeleteMovieGenrePayload

  """Deletes a single `MovieGenre` using a unique key."""
  deleteMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieGenreInput!
  ): DeleteMovieGenrePayload

  """Deletes a single `Movie` using its globally unique id."""
  deleteMovieByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieByNodeIdInput!
  ): DeleteMoviePayload

  """Deletes a single `Movie` using a unique key."""
  deleteMovie(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieInput!
  ): DeleteMoviePayload

  """Deletes a single `Movie` using a unique key."""
  deleteMovieByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMovieByExternalIdInput!
  ): DeleteMoviePayload

  """Deletes a single `MoviesCast` using its globally unique id."""
  deleteMoviesCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesCastByNodeIdInput!
  ): DeleteMoviesCastPayload

  """Deletes a single `MoviesCast` using a unique key."""
  deleteMoviesCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesCastInput!
  ): DeleteMoviesCastPayload

  """Deletes a single `MoviesImage` using its globally unique id."""
  deleteMoviesImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesImageByNodeIdInput!
  ): DeleteMoviesImagePayload

  """Deletes a single `MoviesImage` using a unique key."""
  deleteMoviesImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesImageInput!
  ): DeleteMoviesImagePayload

  """Deletes a single `MoviesLicense` using its globally unique id."""
  deleteMoviesLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesLicenseByNodeIdInput!
  ): DeleteMoviesLicensePayload

  """Deletes a single `MoviesLicense` using a unique key."""
  deleteMoviesLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesLicenseInput!
  ): DeleteMoviesLicensePayload

  """Deletes a single `MoviesMovieGenre` using its globally unique id."""
  deleteMoviesMovieGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesMovieGenreByNodeIdInput!
  ): DeleteMoviesMovieGenrePayload

  """Deletes a single `MoviesMovieGenre` using a unique key."""
  deleteMoviesMovieGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesMovieGenreInput!
  ): DeleteMoviesMovieGenrePayload

  """
  Deletes a single `MoviesProductionCountry` using its globally unique id.
  """
  deleteMoviesProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesProductionCountryByNodeIdInput!
  ): DeleteMoviesProductionCountryPayload

  """Deletes a single `MoviesProductionCountry` using a unique key."""
  deleteMoviesProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesProductionCountryInput!
  ): DeleteMoviesProductionCountryPayload

  """Deletes a single `MoviesTag` using its globally unique id."""
  deleteMoviesTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesTagByNodeIdInput!
  ): DeleteMoviesTagPayload

  """Deletes a single `MoviesTag` using a unique key."""
  deleteMoviesTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesTagInput!
  ): DeleteMoviesTagPayload

  """Deletes a single `MoviesTrailer` using its globally unique id."""
  deleteMoviesTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesTrailerByNodeIdInput!
  ): DeleteMoviesTrailerPayload

  """Deletes a single `MoviesTrailer` using a unique key."""
  deleteMoviesTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMoviesTrailerInput!
  ): DeleteMoviesTrailerPayload

  """Deletes a single `Season` using its globally unique id."""
  deleteSeasonByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonByNodeIdInput!
  ): DeleteSeasonPayload

  """Deletes a single `Season` using a unique key."""
  deleteSeason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonInput!
  ): DeleteSeasonPayload

  """Deletes a single `Season` using a unique key."""
  deleteSeasonByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonByExternalIdInput!
  ): DeleteSeasonPayload

  """Deletes a single `SeasonsCast` using its globally unique id."""
  deleteSeasonsCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsCastByNodeIdInput!
  ): DeleteSeasonsCastPayload

  """Deletes a single `SeasonsCast` using a unique key."""
  deleteSeasonsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsCastInput!
  ): DeleteSeasonsCastPayload

  """Deletes a single `SeasonsImage` using its globally unique id."""
  deleteSeasonsImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsImageByNodeIdInput!
  ): DeleteSeasonsImagePayload

  """Deletes a single `SeasonsImage` using a unique key."""
  deleteSeasonsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsImageInput!
  ): DeleteSeasonsImagePayload

  """Deletes a single `SeasonsLicense` using its globally unique id."""
  deleteSeasonsLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsLicenseByNodeIdInput!
  ): DeleteSeasonsLicensePayload

  """Deletes a single `SeasonsLicense` using a unique key."""
  deleteSeasonsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsLicenseInput!
  ): DeleteSeasonsLicensePayload

  """
  Deletes a single `SeasonsProductionCountry` using its globally unique id.
  """
  deleteSeasonsProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsProductionCountryByNodeIdInput!
  ): DeleteSeasonsProductionCountryPayload

  """Deletes a single `SeasonsProductionCountry` using a unique key."""
  deleteSeasonsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsProductionCountryInput!
  ): DeleteSeasonsProductionCountryPayload

  """Deletes a single `SeasonsTag` using its globally unique id."""
  deleteSeasonsTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTagByNodeIdInput!
  ): DeleteSeasonsTagPayload

  """Deletes a single `SeasonsTag` using a unique key."""
  deleteSeasonsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTagInput!
  ): DeleteSeasonsTagPayload

  """Deletes a single `SeasonsTrailer` using its globally unique id."""
  deleteSeasonsTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTrailerByNodeIdInput!
  ): DeleteSeasonsTrailerPayload

  """Deletes a single `SeasonsTrailer` using a unique key."""
  deleteSeasonsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTrailerInput!
  ): DeleteSeasonsTrailerPayload

  """Deletes a single `SeasonsTvshowGenre` using its globally unique id."""
  deleteSeasonsTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTvshowGenreByNodeIdInput!
  ): DeleteSeasonsTvshowGenrePayload

  """Deletes a single `SeasonsTvshowGenre` using a unique key."""
  deleteSeasonsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSeasonsTvshowGenreInput!
  ): DeleteSeasonsTvshowGenrePayload

  """Deletes a single `TvshowGenre` using its globally unique id."""
  deleteTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowGenreByNodeIdInput!
  ): DeleteTvshowGenrePayload

  """Deletes a single `TvshowGenre` using a unique key."""
  deleteTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowGenreInput!
  ): DeleteTvshowGenrePayload

  """Deletes a single `Tvshow` using its globally unique id."""
  deleteTvshowByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowByNodeIdInput!
  ): DeleteTvshowPayload

  """Deletes a single `Tvshow` using a unique key."""
  deleteTvshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowInput!
  ): DeleteTvshowPayload

  """Deletes a single `Tvshow` using a unique key."""
  deleteTvshowByExternalId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowByExternalIdInput!
  ): DeleteTvshowPayload

  """Deletes a single `TvshowsCast` using its globally unique id."""
  deleteTvshowsCastByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsCastByNodeIdInput!
  ): DeleteTvshowsCastPayload

  """Deletes a single `TvshowsCast` using a unique key."""
  deleteTvshowsCast(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsCastInput!
  ): DeleteTvshowsCastPayload

  """Deletes a single `TvshowsImage` using its globally unique id."""
  deleteTvshowsImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsImageByNodeIdInput!
  ): DeleteTvshowsImagePayload

  """Deletes a single `TvshowsImage` using a unique key."""
  deleteTvshowsImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsImageInput!
  ): DeleteTvshowsImagePayload

  """Deletes a single `TvshowsLicense` using its globally unique id."""
  deleteTvshowsLicenseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsLicenseByNodeIdInput!
  ): DeleteTvshowsLicensePayload

  """Deletes a single `TvshowsLicense` using a unique key."""
  deleteTvshowsLicense(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsLicenseInput!
  ): DeleteTvshowsLicensePayload

  """
  Deletes a single `TvshowsProductionCountry` using its globally unique id.
  """
  deleteTvshowsProductionCountryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsProductionCountryByNodeIdInput!
  ): DeleteTvshowsProductionCountryPayload

  """Deletes a single `TvshowsProductionCountry` using a unique key."""
  deleteTvshowsProductionCountry(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsProductionCountryInput!
  ): DeleteTvshowsProductionCountryPayload

  """Deletes a single `TvshowsTag` using its globally unique id."""
  deleteTvshowsTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTagByNodeIdInput!
  ): DeleteTvshowsTagPayload

  """Deletes a single `TvshowsTag` using a unique key."""
  deleteTvshowsTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTagInput!
  ): DeleteTvshowsTagPayload

  """Deletes a single `TvshowsTrailer` using its globally unique id."""
  deleteTvshowsTrailerByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTrailerByNodeIdInput!
  ): DeleteTvshowsTrailerPayload

  """Deletes a single `TvshowsTrailer` using a unique key."""
  deleteTvshowsTrailer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTrailerInput!
  ): DeleteTvshowsTrailerPayload

  """Deletes a single `TvshowsTvshowGenre` using its globally unique id."""
  deleteTvshowsTvshowGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTvshowGenreByNodeIdInput!
  ): DeleteTvshowsTvshowGenrePayload

  """Deletes a single `TvshowsTvshowGenre` using a unique key."""
  deleteTvshowsTvshowGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTvshowsTvshowGenreInput!
  ): DeleteTvshowsTvshowGenrePayload
  populateMovies(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PopulateInput!
  ): PopulatePayload
  populateTvshows(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PopulateInput!
  ): PopulatePayload
  populateCollections(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: PopulateInput!
  ): PopulatePayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

input PopulateInput {
  clientMutationId: String
  count: Int!
}

type PopulatePayload {
  count: Int!
  query: Query
}

enum PublishStatus {
  NOT_PUBLISHED
  PUBLISH_PROGRESS
  PUBLISHED
  PUBLISH_ERROR
  CHANGED
}

"""
A filter to be used against PublishStatus fields. All fields are combined with a logical ‘and.’
"""
input PublishStatusFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: PublishStatus

  """Not equal to the specified value."""
  notEqualTo: PublishStatus

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: PublishStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: PublishStatus

  """Included in the specified list."""
  in: [PublishStatus!]

  """Not included in the specified list."""
  notIn: [PublishStatus!]

  """Less than the specified value."""
  lessThan: PublishStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: PublishStatus

  """Greater than the specified value."""
  greaterThan: PublishStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: PublishStatus
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `AutomaticCollectionsFilter`.
  """
  automaticCollectionsFilters(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AutomaticCollectionsFilter`."""
    orderBy: [AutomaticCollectionsFiltersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AutomaticCollectionsFilterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AutomaticCollectionsFilterFilter
  ): AutomaticCollectionsFiltersConnection

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection

  """Reads and enables pagination through a set of `Collection`."""
  collections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionFilter
  ): CollectionsConnection

  """Reads and enables pagination through a set of `CollectionsImage`."""
  collectionsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsImageFilter
  ): CollectionsImagesConnection

  """Reads and enables pagination through a set of `CollectionsTag`."""
  collectionsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionsTagFilter
  ): CollectionsTagsConnection

  """Reads and enables pagination through a set of `Episode`."""
  episodes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodeFilter
  ): EpisodesConnection

  """Reads and enables pagination through a set of `EpisodesCast`."""
  episodesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesCastFilter
  ): EpisodesCastsConnection

  """Reads and enables pagination through a set of `EpisodesImage`."""
  episodesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesImageFilter
  ): EpisodesImagesConnection

  """Reads and enables pagination through a set of `EpisodesLicense`."""
  episodesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesLicenseFilter
  ): EpisodesLicensesConnection

  """
  Reads and enables pagination through a set of `EpisodesProductionCountry`.
  """
  episodesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesProductionCountryFilter
  ): EpisodesProductionCountriesConnection

  """Reads and enables pagination through a set of `EpisodesTag`."""
  episodesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTagFilter
  ): EpisodesTagsConnection

  """Reads and enables pagination through a set of `EpisodesTrailer`."""
  episodesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTrailerFilter
  ): EpisodesTrailersConnection

  """Reads and enables pagination through a set of `EpisodesTvshowGenre`."""
  episodesTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTvshowGenreFilter
  ): EpisodesTvshowGenresConnection

  """Reads and enables pagination through a set of `MovieGenre`."""
  movieGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MovieGenreFilter
  ): MovieGenresConnection

  """Reads and enables pagination through a set of `Movie`."""
  movies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MovieCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MovieFilter
  ): MoviesConnection

  """Reads and enables pagination through a set of `MoviesCast`."""
  moviesCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesCastFilter
  ): MoviesCastsConnection

  """Reads and enables pagination through a set of `MoviesImage`."""
  moviesImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesImageFilter
  ): MoviesImagesConnection

  """Reads and enables pagination through a set of `MoviesLicense`."""
  moviesLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesLicenseFilter
  ): MoviesLicensesConnection

  """Reads and enables pagination through a set of `MoviesMovieGenre`."""
  moviesMovieGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesMovieGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesMovieGenreFilter
  ): MoviesMovieGenresConnection

  """
  Reads and enables pagination through a set of `MoviesProductionCountry`.
  """
  moviesProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesProductionCountryFilter
  ): MoviesProductionCountriesConnection

  """Reads and enables pagination through a set of `MoviesTag`."""
  moviesTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTagFilter
  ): MoviesTagsConnection

  """Reads and enables pagination through a set of `MoviesTrailer`."""
  moviesTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MoviesTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MoviesTrailerFilter
  ): MoviesTrailersConnection

  """Reads and enables pagination through a set of `Season`."""
  seasons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonFilter
  ): SeasonsConnection

  """Reads and enables pagination through a set of `SeasonsCast`."""
  seasonsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsCastFilter
  ): SeasonsCastsConnection

  """Reads and enables pagination through a set of `SeasonsImage`."""
  seasonsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsImageFilter
  ): SeasonsImagesConnection

  """Reads and enables pagination through a set of `SeasonsLicense`."""
  seasonsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsLicenseFilter
  ): SeasonsLicensesConnection

  """
  Reads and enables pagination through a set of `SeasonsProductionCountry`.
  """
  seasonsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsProductionCountryFilter
  ): SeasonsProductionCountriesConnection

  """Reads and enables pagination through a set of `SeasonsTag`."""
  seasonsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTagFilter
  ): SeasonsTagsConnection

  """Reads and enables pagination through a set of `SeasonsTrailer`."""
  seasonsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTrailerFilter
  ): SeasonsTrailersConnection

  """Reads and enables pagination through a set of `SeasonsTvshowGenre`."""
  seasonsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTvshowGenreFilter
  ): SeasonsTvshowGenresConnection

  """Reads and enables pagination through a set of `TvshowGenre`."""
  tvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowGenreFilter
  ): TvshowGenresConnection

  """Reads and enables pagination through a set of `Tvshow`."""
  tvshows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowFilter
  ): TvshowsConnection

  """Reads and enables pagination through a set of `TvshowsCast`."""
  tvshowsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsCastFilter
  ): TvshowsCastsConnection

  """Reads and enables pagination through a set of `TvshowsImage`."""
  tvshowsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsImageFilter
  ): TvshowsImagesConnection

  """Reads and enables pagination through a set of `TvshowsLicense`."""
  tvshowsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsLicenseFilter
  ): TvshowsLicensesConnection

  """
  Reads and enables pagination through a set of `TvshowsProductionCountry`.
  """
  tvshowsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsProductionCountryFilter
  ): TvshowsProductionCountriesConnection

  """Reads and enables pagination through a set of `TvshowsTag`."""
  tvshowsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTagFilter
  ): TvshowsTagsConnection

  """Reads and enables pagination through a set of `TvshowsTrailer`."""
  tvshowsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTrailerFilter
  ): TvshowsTrailersConnection

  """Reads and enables pagination through a set of `TvshowsTvshowGenre`."""
  tvshowsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTvshowGenreFilter
  ): TvshowsTvshowGenresConnection
  automaticCollectionsFilter(id: Int!): AutomaticCollectionsFilter
  collectionRelation(id: Int!): CollectionRelation
  collectionRelationByCollectionIdAndMovieId(collectionId: Int!, movieId: Int!): CollectionRelation
  collectionRelationByCollectionIdAndTvshowId(collectionId: Int!, tvshowId: Int!): CollectionRelation
  collectionRelationByCollectionIdAndSeasonId(collectionId: Int!, seasonId: Int!): CollectionRelation
  collectionRelationByCollectionIdAndEpisodeId(collectionId: Int!, episodeId: Int!): CollectionRelation
  collection(id: Int!): Collection
  collectionByExternalId(externalId: String!): Collection
  collectionsImage(collectionId: Int!, imageId: Int!, imageType: CollectionImageType!): CollectionsImage
  collectionsTag(collectionId: Int!, name: String!): CollectionsTag
  episode(id: Int!): Episode
  episodeByExternalId(externalId: String!): Episode
  episodesCast(episodeId: Int!, name: String!): EpisodesCast
  episodesImage(episodeId: Int!, imageId: Int!, imageType: EpisodeImageType!): EpisodesImage
  episodesLicense(id: Int!): EpisodesLicense
  episodesProductionCountry(episodeId: Int!, name: String!): EpisodesProductionCountry
  episodesTag(episodeId: Int!, name: String!): EpisodesTag
  episodesTrailer(episodeId: Int!, videoId: Int!): EpisodesTrailer
  episodesTvshowGenre(episodeId: Int!, tvshowGenresId: Int!): EpisodesTvshowGenre
  movieGenre(id: Int!): MovieGenre
  movie(id: Int!): Movie
  movieByExternalId(externalId: String!): Movie
  moviesCast(movieId: Int!, name: String!): MoviesCast
  moviesImage(movieId: Int!, imageId: Int!, imageType: MovieImageType!): MoviesImage
  moviesLicense(id: Int!): MoviesLicense
  moviesMovieGenre(movieId: Int!, movieGenresId: Int!): MoviesMovieGenre
  moviesProductionCountry(movieId: Int!, name: String!): MoviesProductionCountry
  moviesTag(movieId: Int!, name: String!): MoviesTag
  moviesTrailer(movieId: Int!, videoId: Int!): MoviesTrailer
  season(id: Int!): Season
  seasonByExternalId(externalId: String!): Season
  seasonsCast(seasonId: Int!, name: String!): SeasonsCast
  seasonsImage(seasonId: Int!, imageId: Int!, imageType: SeasonImageType!): SeasonsImage
  seasonsLicense(id: Int!): SeasonsLicense
  seasonsProductionCountry(seasonId: Int!, name: String!): SeasonsProductionCountry
  seasonsTag(seasonId: Int!, name: String!): SeasonsTag
  seasonsTrailer(seasonId: Int!, videoId: Int!): SeasonsTrailer
  seasonsTvshowGenre(seasonId: Int!, tvshowGenresId: Int!): SeasonsTvshowGenre
  tvshowGenre(id: Int!): TvshowGenre
  tvshow(id: Int!): Tvshow
  tvshowByExternalId(externalId: String!): Tvshow
  tvshowsCast(tvshowId: Int!, name: String!): TvshowsCast
  tvshowsImage(tvshowId: Int!, imageId: Int!, imageType: TvshowImageType!): TvshowsImage
  tvshowsLicense(id: Int!): TvshowsLicense
  tvshowsProductionCountry(tvshowId: Int!, name: String!): TvshowsProductionCountry
  tvshowsTag(tvshowId: Int!, name: String!): TvshowsTag
  tvshowsTrailer(tvshowId: Int!, videoId: Int!): TvshowsTrailer
  tvshowsTvshowGenre(tvshowId: Int!, tvshowGenresId: Int!): TvshowsTvshowGenre
  getCollectionEntityValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionEntityFilter
  ): GetCollectionEntityValuesConnection!
  getCollectionImageTypeValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionImageTypeFilter
  ): GetCollectionImageTypeValuesConnection!
  getCollectionTypeValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionTypeFilter
  ): GetCollectionTypeValuesConnection!
  getEpisodeImageTypeValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodeImageTypeFilter
  ): GetEpisodeImageTypeValuesConnection!
  getIsoAlphaThreeCountryCodesValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): GetIsoAlphaThreeCountryCodesValuesConnection!
  getMovieImageTypeValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MovieImageTypeFilter
  ): GetMovieImageTypeValuesConnection!
  getPublishStatusValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublishStatusFilter
  ): GetPublishStatusValuesConnection!
  getSeasonImageTypeValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonImageTypeFilter
  ): GetSeasonImageTypeValuesConnection!
  getTvshowImageTypeValues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowImageTypeFilter
  ): GetTvshowImageTypeValuesConnection!

  """
  Reads a single `AutomaticCollectionsFilter` using its globally unique `ID`.
  """
  automaticCollectionsFilterByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `AutomaticCollectionsFilter`.
    """
    nodeId: ID!
  ): AutomaticCollectionsFilter

  """Reads a single `CollectionRelation` using its globally unique `ID`."""
  collectionRelationByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionRelation`.
    """
    nodeId: ID!
  ): CollectionRelation

  """Reads a single `Collection` using its globally unique `ID`."""
  collectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Collection`.
    """
    nodeId: ID!
  ): Collection

  """Reads a single `CollectionsImage` using its globally unique `ID`."""
  collectionsImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionsImage`.
    """
    nodeId: ID!
  ): CollectionsImage

  """Reads a single `CollectionsTag` using its globally unique `ID`."""
  collectionsTagByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CollectionsTag`.
    """
    nodeId: ID!
  ): CollectionsTag

  """Reads a single `Episode` using its globally unique `ID`."""
  episodeByNodeId(
    """The globally unique `ID` to be used in selecting a single `Episode`."""
    nodeId: ID!
  ): Episode

  """Reads a single `EpisodesCast` using its globally unique `ID`."""
  episodesCastByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EpisodesCast`.
    """
    nodeId: ID!
  ): EpisodesCast

  """Reads a single `EpisodesImage` using its globally unique `ID`."""
  episodesImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EpisodesImage`.
    """
    nodeId: ID!
  ): EpisodesImage

  """Reads a single `EpisodesLicense` using its globally unique `ID`."""
  episodesLicenseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EpisodesLicense`.
    """
    nodeId: ID!
  ): EpisodesLicense

  """
  Reads a single `EpisodesProductionCountry` using its globally unique `ID`.
  """
  episodesProductionCountryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EpisodesProductionCountry`.
    """
    nodeId: ID!
  ): EpisodesProductionCountry

  """Reads a single `EpisodesTag` using its globally unique `ID`."""
  episodesTagByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EpisodesTag`.
    """
    nodeId: ID!
  ): EpisodesTag

  """Reads a single `EpisodesTrailer` using its globally unique `ID`."""
  episodesTrailerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EpisodesTrailer`.
    """
    nodeId: ID!
  ): EpisodesTrailer

  """Reads a single `EpisodesTvshowGenre` using its globally unique `ID`."""
  episodesTvshowGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `EpisodesTvshowGenre`.
    """
    nodeId: ID!
  ): EpisodesTvshowGenre

  """Reads a single `MovieGenre` using its globally unique `ID`."""
  movieGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MovieGenre`.
    """
    nodeId: ID!
  ): MovieGenre

  """Reads a single `Movie` using its globally unique `ID`."""
  movieByNodeId(
    """The globally unique `ID` to be used in selecting a single `Movie`."""
    nodeId: ID!
  ): Movie

  """Reads a single `MoviesCast` using its globally unique `ID`."""
  moviesCastByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MoviesCast`.
    """
    nodeId: ID!
  ): MoviesCast

  """Reads a single `MoviesImage` using its globally unique `ID`."""
  moviesImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MoviesImage`.
    """
    nodeId: ID!
  ): MoviesImage

  """Reads a single `MoviesLicense` using its globally unique `ID`."""
  moviesLicenseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MoviesLicense`.
    """
    nodeId: ID!
  ): MoviesLicense

  """Reads a single `MoviesMovieGenre` using its globally unique `ID`."""
  moviesMovieGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MoviesMovieGenre`.
    """
    nodeId: ID!
  ): MoviesMovieGenre

  """
  Reads a single `MoviesProductionCountry` using its globally unique `ID`.
  """
  moviesProductionCountryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MoviesProductionCountry`.
    """
    nodeId: ID!
  ): MoviesProductionCountry

  """Reads a single `MoviesTag` using its globally unique `ID`."""
  moviesTagByNodeId(
    """The globally unique `ID` to be used in selecting a single `MoviesTag`."""
    nodeId: ID!
  ): MoviesTag

  """Reads a single `MoviesTrailer` using its globally unique `ID`."""
  moviesTrailerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MoviesTrailer`.
    """
    nodeId: ID!
  ): MoviesTrailer

  """Reads a single `Season` using its globally unique `ID`."""
  seasonByNodeId(
    """The globally unique `ID` to be used in selecting a single `Season`."""
    nodeId: ID!
  ): Season

  """Reads a single `SeasonsCast` using its globally unique `ID`."""
  seasonsCastByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonsCast`.
    """
    nodeId: ID!
  ): SeasonsCast

  """Reads a single `SeasonsImage` using its globally unique `ID`."""
  seasonsImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonsImage`.
    """
    nodeId: ID!
  ): SeasonsImage

  """Reads a single `SeasonsLicense` using its globally unique `ID`."""
  seasonsLicenseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonsLicense`.
    """
    nodeId: ID!
  ): SeasonsLicense

  """
  Reads a single `SeasonsProductionCountry` using its globally unique `ID`.
  """
  seasonsProductionCountryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonsProductionCountry`.
    """
    nodeId: ID!
  ): SeasonsProductionCountry

  """Reads a single `SeasonsTag` using its globally unique `ID`."""
  seasonsTagByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonsTag`.
    """
    nodeId: ID!
  ): SeasonsTag

  """Reads a single `SeasonsTrailer` using its globally unique `ID`."""
  seasonsTrailerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonsTrailer`.
    """
    nodeId: ID!
  ): SeasonsTrailer

  """Reads a single `SeasonsTvshowGenre` using its globally unique `ID`."""
  seasonsTvshowGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SeasonsTvshowGenre`.
    """
    nodeId: ID!
  ): SeasonsTvshowGenre

  """Reads a single `TvshowGenre` using its globally unique `ID`."""
  tvshowGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowGenre`.
    """
    nodeId: ID!
  ): TvshowGenre

  """Reads a single `Tvshow` using its globally unique `ID`."""
  tvshowByNodeId(
    """The globally unique `ID` to be used in selecting a single `Tvshow`."""
    nodeId: ID!
  ): Tvshow

  """Reads a single `TvshowsCast` using its globally unique `ID`."""
  tvshowsCastByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowsCast`.
    """
    nodeId: ID!
  ): TvshowsCast

  """Reads a single `TvshowsImage` using its globally unique `ID`."""
  tvshowsImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowsImage`.
    """
    nodeId: ID!
  ): TvshowsImage

  """Reads a single `TvshowsLicense` using its globally unique `ID`."""
  tvshowsLicenseByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowsLicense`.
    """
    nodeId: ID!
  ): TvshowsLicense

  """
  Reads a single `TvshowsProductionCountry` using its globally unique `ID`.
  """
  tvshowsProductionCountryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowsProductionCountry`.
    """
    nodeId: ID!
  ): TvshowsProductionCountry

  """Reads a single `TvshowsTag` using its globally unique `ID`."""
  tvshowsTagByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowsTag`.
    """
    nodeId: ID!
  ): TvshowsTag

  """Reads a single `TvshowsTrailer` using its globally unique `ID`."""
  tvshowsTrailerByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowsTrailer`.
    """
    nodeId: ID!
  ): TvshowsTrailer

  """Reads a single `TvshowsTvshowGenre` using its globally unique `ID`."""
  tvshowsTvshowGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `TvshowsTvshowGenre`.
    """
    nodeId: ID!
  ): TvshowsTvshowGenre
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type Season implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tvshowId: Int
  index: Int!
  externalId: String
  synopsis: String
  description: String
  studio: String
  released: Date
  publishStatus: PublishStatus
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """Reads and enables pagination through a set of `SeasonsTag`."""
  seasonsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTagFilter
  ): SeasonsTagsConnection!

  """Reads and enables pagination through a set of `SeasonsCast`."""
  seasonsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsCastFilter
  ): SeasonsCastsConnection!

  """Reads and enables pagination through a set of `SeasonsLicense`."""
  seasonsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsLicenseFilter
  ): SeasonsLicensesConnection!

  """
  Reads and enables pagination through a set of `SeasonsProductionCountry`.
  """
  seasonsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsProductionCountryFilter
  ): SeasonsProductionCountriesConnection!

  """Reads and enables pagination through a set of `SeasonsTvshowGenre`."""
  seasonsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTvshowGenreFilter
  ): SeasonsTvshowGenresConnection!

  """Reads and enables pagination through a set of `SeasonsImage`."""
  seasonsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsImageFilter
  ): SeasonsImagesConnection!

  """Reads and enables pagination through a set of `SeasonsTrailer`."""
  seasonsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTrailerFilter
  ): SeasonsTrailersConnection!

  """Reads and enables pagination through a set of `Episode`."""
  episodes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodeFilter
  ): EpisodesConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!
}

"""
A condition to be used against `Season` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SeasonCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `Season` object types. All fields are combined with a logical ‘and.’
"""
input SeasonFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `seasonsTags` relation."""
  seasonsTags: SeasonToManySeasonsTagFilter

  """Some related `seasonsTags` exist."""
  seasonsTagsExist: Boolean

  """Filter by the object’s `seasonsCasts` relation."""
  seasonsCasts: SeasonToManySeasonsCastFilter

  """Some related `seasonsCasts` exist."""
  seasonsCastsExist: Boolean

  """Filter by the object’s `seasonsLicenses` relation."""
  seasonsLicenses: SeasonToManySeasonsLicenseFilter

  """Some related `seasonsLicenses` exist."""
  seasonsLicensesExist: Boolean

  """Filter by the object’s `seasonsProductionCountries` relation."""
  seasonsProductionCountries: SeasonToManySeasonsProductionCountryFilter

  """Some related `seasonsProductionCountries` exist."""
  seasonsProductionCountriesExist: Boolean

  """Filter by the object’s `seasonsTvshowGenres` relation."""
  seasonsTvshowGenres: SeasonToManySeasonsTvshowGenreFilter

  """Some related `seasonsTvshowGenres` exist."""
  seasonsTvshowGenresExist: Boolean

  """Filter by the object’s `seasonsImages` relation."""
  seasonsImages: SeasonToManySeasonsImageFilter

  """Some related `seasonsImages` exist."""
  seasonsImagesExist: Boolean

  """Filter by the object’s `seasonsTrailers` relation."""
  seasonsTrailers: SeasonToManySeasonsTrailerFilter

  """Some related `seasonsTrailers` exist."""
  seasonsTrailersExist: Boolean

  """Filter by the object’s `episodes` relation."""
  episodes: SeasonToManyEpisodeFilter

  """Some related `episodes` exist."""
  episodesExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: SeasonToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """A related `tvshow` exists."""
  tvshowExists: Boolean

  """Checks for all expressions in this list."""
  and: [SeasonFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonFilter!]

  """Negates the expression."""
  not: SeasonFilter
}

enum SeasonImageType {
  COVER
  TEASER
}

"""
A filter to be used against SeasonImageType fields. All fields are combined with a logical ‘and.’
"""
input SeasonImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: SeasonImageType

  """Not equal to the specified value."""
  notEqualTo: SeasonImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: SeasonImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: SeasonImageType

  """Included in the specified list."""
  in: [SeasonImageType!]

  """Not included in the specified list."""
  notIn: [SeasonImageType!]

  """Less than the specified value."""
  lessThan: SeasonImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: SeasonImageType

  """Greater than the specified value."""
  greaterThan: SeasonImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: SeasonImageType
}

"""An input for mutations affecting `Season`"""
input SeasonInput {
  tvshowId: Int
  index: Int!
  externalId: String
  synopsis: String
  description: String
  studio: String
  released: Date
}

"""
Represents an update to a `Season`. Fields that are set will be updated.
"""
input SeasonPatch {
  tvshowId: Int
  index: Int
  externalId: String
  synopsis: String
  description: String
  studio: String
  released: Date
  publishStatus: PublishStatus
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type SeasonsCast implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  seasonId: Int!
  name: String!

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season
}

"""
A condition to be used against `SeasonsCast` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SeasonsCastCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `SeasonsCast` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsCastFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsCastFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsCastFilter!]

  """Negates the expression."""
  not: SeasonsCastFilter
}

"""An input for mutations affecting `SeasonsCast`"""
input SeasonsCastInput {
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `SeasonsCast`. Fields that are set will be updated.
"""
input SeasonsCastPatch {
  seasonId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `SeasonsCast` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsCastsConnection {
  """A list of `SeasonsCast` objects."""
  nodes: [SeasonsCast]!

  """
  A list of edges which contains the `SeasonsCast` and cursor to aid in pagination.
  """
  edges: [SeasonsCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsCast` you could get from the connection."""
  totalCount: Int!
}

"""A `SeasonsCast` edge in the connection."""
type SeasonsCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsCast` at the end of the edge."""
  node: SeasonsCast
}

"""Methods to use when ordering `SeasonsCast`."""
enum SeasonsCastsOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `Season` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsConnection {
  """A list of `Season` objects."""
  nodes: [Season]!

  """
  A list of edges which contains the `Season` and cursor to aid in pagination.
  """
  edges: [SeasonsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Season` you could get from the connection."""
  totalCount: Int!
}

"""A `Season` edge in the connection."""
type SeasonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Season` at the end of the edge."""
  node: Season
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type SeasonsImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  seasonId: Int!
  imageId: Int!
  imageType: SeasonImageType!

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season
}

"""
A condition to be used against `SeasonsImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsImageCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `imageType` field."""
  imageType: SeasonImageType
}

"""
A filter to be used against `SeasonsImage` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsImageFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Filter by the object’s `imageType` field."""
  imageType: SeasonImageTypeFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsImageFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsImageFilter!]

  """Negates the expression."""
  not: SeasonsImageFilter
}

"""An input for mutations affecting `SeasonsImage`"""
input SeasonsImageInput {
  seasonId: Int!
  imageId: Int!
  imageType: SeasonImageType!
}

"""
Represents an update to a `SeasonsImage`. Fields that are set will be updated.
"""
input SeasonsImagePatch {
  seasonId: Int
  imageId: Int
  imageType: SeasonImageType
}

"""
A connection to a list of `SeasonsImage` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsImagesConnection {
  """A list of `SeasonsImage` objects."""
  nodes: [SeasonsImage]!

  """
  A list of edges which contains the `SeasonsImage` and cursor to aid in pagination.
  """
  edges: [SeasonsImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsImage` you could get from the connection."""
  totalCount: Int!
}

"""A `SeasonsImage` edge in the connection."""
type SeasonsImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsImage` at the end of the edge."""
  node: SeasonsImage
}

"""Methods to use when ordering `SeasonsImage`."""
enum SeasonsImagesOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type SeasonsLicense implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  seasonId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season
}

"""
A condition to be used against `SeasonsLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `countries` field."""
  countries: [IsoAlphaThreeCountryCodes]

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `SeasonsLicense` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `countries` field."""
  countries: IsoAlphaThreeCountryCodesListFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsLicenseFilter!]

  """Negates the expression."""
  not: SeasonsLicenseFilter
}

"""An input for mutations affecting `SeasonsLicense`"""
input SeasonsLicenseInput {
  seasonId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
Represents an update to a `SeasonsLicense`. Fields that are set will be updated.
"""
input SeasonsLicensePatch {
  seasonId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
A connection to a list of `SeasonsLicense` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsLicensesConnection {
  """A list of `SeasonsLicense` objects."""
  nodes: [SeasonsLicense]!

  """
  A list of edges which contains the `SeasonsLicense` and cursor to aid in pagination.
  """
  edges: [SeasonsLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsLicense` you could get from the connection."""
  totalCount: Int!
}

"""A `SeasonsLicense` edge in the connection."""
type SeasonsLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsLicense` at the end of the edge."""
  node: SeasonsLicense
}

"""Methods to use when ordering `SeasonsLicense`."""
enum SeasonsLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SEASON_ID_ASC
  SEASON_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  COUNTRIES_ASC
  COUNTRIES_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Season`."""
enum SeasonsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  INDEX_ASC
  INDEX_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `SeasonsProductionCountry` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsProductionCountriesConnection {
  """A list of `SeasonsProductionCountry` objects."""
  nodes: [SeasonsProductionCountry]!

  """
  A list of edges which contains the `SeasonsProductionCountry` and cursor to aid in pagination.
  """
  edges: [SeasonsProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SeasonsProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SeasonsProductionCountry` edge in the connection."""
type SeasonsProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsProductionCountry` at the end of the edge."""
  node: SeasonsProductionCountry
}

"""Methods to use when ordering `SeasonsProductionCountry`."""
enum SeasonsProductionCountriesOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type SeasonsProductionCountry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  seasonId: Int!
  name: String!

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season
}

"""
A condition to be used against `SeasonsProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input SeasonsProductionCountryCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `SeasonsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsProductionCountryFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsProductionCountryFilter!]

  """Negates the expression."""
  not: SeasonsProductionCountryFilter
}

"""An input for mutations affecting `SeasonsProductionCountry`"""
input SeasonsProductionCountryInput {
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `SeasonsProductionCountry`. Fields that are set will be updated.
"""
input SeasonsProductionCountryPatch {
  seasonId: Int

  """@notEmpty()"""
  name: String
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type SeasonsTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  seasonId: Int!
  name: String!

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season
}

"""
A condition to be used against `SeasonsTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SeasonsTagCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `SeasonsTag` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsTagFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsTagFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsTagFilter!]

  """Negates the expression."""
  not: SeasonsTagFilter
}

"""An input for mutations affecting `SeasonsTag`"""
input SeasonsTagInput {
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `SeasonsTag`. Fields that are set will be updated.
"""
input SeasonsTagPatch {
  seasonId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `SeasonsTag` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsTagsConnection {
  """A list of `SeasonsTag` objects."""
  nodes: [SeasonsTag]!

  """
  A list of edges which contains the `SeasonsTag` and cursor to aid in pagination.
  """
  edges: [SeasonsTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsTag` you could get from the connection."""
  totalCount: Int!
}

"""A `SeasonsTag` edge in the connection."""
type SeasonsTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsTag` at the end of the edge."""
  node: SeasonsTag
}

"""Methods to use when ordering `SeasonsTag`."""
enum SeasonsTagsOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type SeasonsTrailer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  seasonId: Int!
  videoId: Int!

  """Reads a single `Season` that is related to this `SeasonsTrailer`."""
  season: Season
}

"""
A condition to be used against `SeasonsTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsTrailerCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: Int
}

"""
A filter to be used against `SeasonsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsTrailerFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: IntFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Checks for all expressions in this list."""
  and: [SeasonsTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsTrailerFilter!]

  """Negates the expression."""
  not: SeasonsTrailerFilter
}

"""An input for mutations affecting `SeasonsTrailer`"""
input SeasonsTrailerInput {
  seasonId: Int!
  videoId: Int!
}

"""
Represents an update to a `SeasonsTrailer`. Fields that are set will be updated.
"""
input SeasonsTrailerPatch {
  seasonId: Int
  videoId: Int
}

"""
A connection to a list of `SeasonsTrailer` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsTrailersConnection {
  """A list of `SeasonsTrailer` objects."""
  nodes: [SeasonsTrailer]!

  """
  A list of edges which contains the `SeasonsTrailer` and cursor to aid in pagination.
  """
  edges: [SeasonsTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SeasonsTrailer` you could get from the connection."""
  totalCount: Int!
}

"""A `SeasonsTrailer` edge in the connection."""
type SeasonsTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsTrailer` at the end of the edge."""
  node: SeasonsTrailer
}

"""Methods to use when ordering `SeasonsTrailer`."""
enum SeasonsTrailersOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type SeasonsTvshowGenre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  seasonId: Int!
  tvshowGenresId: Int!

  """Reads a single `Season` that is related to this `SeasonsTvshowGenre`."""
  season: Season

  """
  Reads a single `TvshowGenre` that is related to this `SeasonsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre
}

"""
A condition to be used against `SeasonsTvshowGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SeasonsTvshowGenreCondition {
  """Checks for equality with the object’s `seasonId` field."""
  seasonId: Int

  """Checks for equality with the object’s `tvshowGenresId` field."""
  tvshowGenresId: Int
}

"""
A filter to be used against `SeasonsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input SeasonsTvshowGenreFilter {
  """Filter by the object’s `seasonId` field."""
  seasonId: IntFilter

  """Filter by the object’s `tvshowGenresId` field."""
  tvshowGenresId: IntFilter

  """Filter by the object’s `season` relation."""
  season: SeasonFilter

  """Filter by the object’s `tvshowGenres` relation."""
  tvshowGenres: TvshowGenreFilter

  """Checks for all expressions in this list."""
  and: [SeasonsTvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [SeasonsTvshowGenreFilter!]

  """Negates the expression."""
  not: SeasonsTvshowGenreFilter
}

"""An input for mutations affecting `SeasonsTvshowGenre`"""
input SeasonsTvshowGenreInput {
  seasonId: Int!
  tvshowGenresId: Int!
}

"""
Represents an update to a `SeasonsTvshowGenre`. Fields that are set will be updated.
"""
input SeasonsTvshowGenrePatch {
  seasonId: Int
  tvshowGenresId: Int
}

"""
A connection to a list of `SeasonsTvshowGenre` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type SeasonsTvshowGenresConnection {
  """A list of `SeasonsTvshowGenre` objects."""
  nodes: [SeasonsTvshowGenre]!

  """
  A list of edges which contains the `SeasonsTvshowGenre` and cursor to aid in pagination.
  """
  edges: [SeasonsTvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SeasonsTvshowGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""A `SeasonsTvshowGenre` edge in the connection."""
type SeasonsTvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SeasonsTvshowGenre` at the end of the edge."""
  node: SeasonsTvshowGenre
}

"""Methods to use when ordering `SeasonsTvshowGenre`."""
enum SeasonsTvshowGenresOrderBy {
  NATURAL
  SEASON_ID_ASC
  SEASON_ID_DESC
  TVSHOW_GENRES_ID_ASC
  TVSHOW_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SeasonSubscriptionPayload {
  id: Int!
  season: Season
  event: String
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `Episode` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManyEpisodeFilter {
  """
  Every related `Episode` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodeFilter

  """
  Some related `Episode` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodeFilter

  """
  No related `Episode` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodeFilter
}

"""
A filter to be used against many `SeasonsCast` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsCastFilter {
  """
  Every related `SeasonsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsCastFilter

  """
  Some related `SeasonsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsCastFilter

  """
  No related `SeasonsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsCastFilter
}

"""
A filter to be used against many `SeasonsImage` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsImageFilter {
  """
  Every related `SeasonsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsImageFilter

  """
  Some related `SeasonsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsImageFilter

  """
  No related `SeasonsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsImageFilter
}

"""
A filter to be used against many `SeasonsLicense` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsLicenseFilter {
  """
  Every related `SeasonsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsLicenseFilter

  """
  Some related `SeasonsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsLicenseFilter

  """
  No related `SeasonsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsLicenseFilter
}

"""
A filter to be used against many `SeasonsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsProductionCountryFilter {
  """
  Every related `SeasonsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsProductionCountryFilter

  """
  Some related `SeasonsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsProductionCountryFilter

  """
  No related `SeasonsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsProductionCountryFilter
}

"""
A filter to be used against many `SeasonsTag` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsTagFilter {
  """
  Every related `SeasonsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTagFilter

  """
  Some related `SeasonsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTagFilter

  """
  No related `SeasonsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTagFilter
}

"""
A filter to be used against many `SeasonsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsTrailerFilter {
  """
  Every related `SeasonsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTrailerFilter

  """
  Some related `SeasonsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTrailerFilter

  """
  No related `SeasonsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTrailerFilter
}

"""
A filter to be used against many `SeasonsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input SeasonToManySeasonsTvshowGenreFilter {
  """
  Every related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTvshowGenreFilter

  """
  Some related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTvshowGenreFilter

  """
  No related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTvshowGenreFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """Triggered when a MovieGenre is mutated (insert, update or delete). """
  movieGenreMutated: MovieGenreSubscriptionPayload

  """Triggered when a TvshowGenre is mutated (insert, update or delete). """
  tvshowGenreMutated: TvshowGenreSubscriptionPayload

  """Triggered when a Movie is mutated (insert, update or delete). """
  movieMutated: MovieSubscriptionPayload

  """Triggered when a Tvshow is mutated (insert, update or delete). """
  tvshowMutated: TvshowSubscriptionPayload

  """Triggered when a Season is mutated (insert, update or delete). """
  seasonMutated: SeasonSubscriptionPayload

  """Triggered when a Episode is mutated (insert, update or delete). """
  episodeMutated: EpisodeSubscriptionPayload

  """Triggered when a Collection is mutated (insert, update or delete). """
  collectionMutated: CollectionSubscriptionPayload
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type Tvshow implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  publishStatus: PublishStatus
  publishedDate: Datetime
  publishedUser: String
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads and enables pagination through a set of `TvshowsTag`."""
  tvshowsTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTagFilter
  ): TvshowsTagsConnection!

  """Reads and enables pagination through a set of `TvshowsCast`."""
  tvshowsCasts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsCastCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsCastFilter
  ): TvshowsCastsConnection!

  """Reads and enables pagination through a set of `TvshowsLicense`."""
  tvshowsLicenses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsLicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsLicenseFilter
  ): TvshowsLicensesConnection!

  """
  Reads and enables pagination through a set of `TvshowsProductionCountry`.
  """
  tvshowsProductionCountries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsProductionCountryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsProductionCountryFilter
  ): TvshowsProductionCountriesConnection!

  """Reads and enables pagination through a set of `TvshowsTvshowGenre`."""
  tvshowsTvshowGenres(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTvshowGenreFilter
  ): TvshowsTvshowGenresConnection!

  """Reads and enables pagination through a set of `TvshowsImage`."""
  tvshowsImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsImageFilter
  ): TvshowsImagesConnection!

  """Reads and enables pagination through a set of `TvshowsTrailer`."""
  tvshowsTrailers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTrailerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTrailerFilter
  ): TvshowsTrailersConnection!

  """Reads and enables pagination through a set of `Season`."""
  seasons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonFilter
  ): SeasonsConnection!

  """Reads and enables pagination through a set of `CollectionRelation`."""
  collectionRelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CollectionRelationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CollectionRelationFilter
  ): CollectionRelationsConnection!
}

"""
A condition to be used against `Tvshow` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TvshowCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(100)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `externalId` field."""
  externalId: String

  """Checks for equality with the object’s `originalTitle` field."""
  originalTitle: String

  """Checks for equality with the object’s `synopsis` field."""
  synopsis: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `studio` field."""
  studio: String

  """Checks for equality with the object’s `released` field."""
  released: Date

  """Checks for equality with the object’s `publishStatus` field."""
  publishStatus: PublishStatus

  """Checks for equality with the object’s `publishedDate` field."""
  publishedDate: Datetime

  """Checks for equality with the object’s `publishedUser` field."""
  publishedUser: String

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `Tvshow` object types. All fields are combined with a logical ‘and.’
"""
input TvshowFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `externalId` field."""
  externalId: StringFilter

  """Filter by the object’s `originalTitle` field."""
  originalTitle: StringFilter

  """Filter by the object’s `synopsis` field."""
  synopsis: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `studio` field."""
  studio: StringFilter

  """Filter by the object’s `released` field."""
  released: DateFilter

  """Filter by the object’s `publishStatus` field."""
  publishStatus: PublishStatusFilter

  """Filter by the object’s `publishedDate` field."""
  publishedDate: DatetimeFilter

  """Filter by the object’s `publishedUser` field."""
  publishedUser: StringFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `tvshowsTags` relation."""
  tvshowsTags: TvshowToManyTvshowsTagFilter

  """Some related `tvshowsTags` exist."""
  tvshowsTagsExist: Boolean

  """Filter by the object’s `tvshowsCasts` relation."""
  tvshowsCasts: TvshowToManyTvshowsCastFilter

  """Some related `tvshowsCasts` exist."""
  tvshowsCastsExist: Boolean

  """Filter by the object’s `tvshowsLicenses` relation."""
  tvshowsLicenses: TvshowToManyTvshowsLicenseFilter

  """Some related `tvshowsLicenses` exist."""
  tvshowsLicensesExist: Boolean

  """Filter by the object’s `tvshowsProductionCountries` relation."""
  tvshowsProductionCountries: TvshowToManyTvshowsProductionCountryFilter

  """Some related `tvshowsProductionCountries` exist."""
  tvshowsProductionCountriesExist: Boolean

  """Filter by the object’s `tvshowsTvshowGenres` relation."""
  tvshowsTvshowGenres: TvshowToManyTvshowsTvshowGenreFilter

  """Some related `tvshowsTvshowGenres` exist."""
  tvshowsTvshowGenresExist: Boolean

  """Filter by the object’s `tvshowsImages` relation."""
  tvshowsImages: TvshowToManyTvshowsImageFilter

  """Some related `tvshowsImages` exist."""
  tvshowsImagesExist: Boolean

  """Filter by the object’s `tvshowsTrailers` relation."""
  tvshowsTrailers: TvshowToManyTvshowsTrailerFilter

  """Some related `tvshowsTrailers` exist."""
  tvshowsTrailersExist: Boolean

  """Filter by the object’s `seasons` relation."""
  seasons: TvshowToManySeasonFilter

  """Some related `seasons` exist."""
  seasonsExist: Boolean

  """Filter by the object’s `collectionRelations` relation."""
  collectionRelations: TvshowToManyCollectionRelationFilter

  """Some related `collectionRelations` exist."""
  collectionRelationsExist: Boolean

  """Checks for all expressions in this list."""
  and: [TvshowFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowFilter!]

  """Negates the expression."""
  not: TvshowFilter
}

"""@permissions: SETTINGS_READER,SETTINGS_EDITOR,ADMIN"""
type TvshowGenre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  title: String!
  sortOrder: Int!
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads and enables pagination through a set of `TvshowsTvshowGenre`."""
  tvshowsTvshowGenresByTvshowGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TvshowsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TvshowsTvshowGenreFilter
  ): TvshowsTvshowGenresConnection!

  """Reads and enables pagination through a set of `SeasonsTvshowGenre`."""
  seasonsTvshowGenresByTvshowGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SeasonsTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SeasonsTvshowGenreFilter
  ): SeasonsTvshowGenresConnection!

  """Reads and enables pagination through a set of `EpisodesTvshowGenre`."""
  episodesTvshowGenresByTvshowGenresId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpisodesTvshowGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpisodesTvshowGenreFilter
  ): EpisodesTvshowGenresConnection!
}

"""
A condition to be used against `TvshowGenre` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TvshowGenreCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `title` field.
  @maxLength(50)
  @notEmpty()
  """
  title: String

  """Checks for equality with the object’s `sortOrder` field."""
  sortOrder: Int

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `TvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `sortOrder` field."""
  sortOrder: IntFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `tvshowsTvshowGenresByTvshowGenresId` relation."""
  tvshowsTvshowGenresByTvshowGenresId: TvshowGenreToManyTvshowsTvshowGenreFilter

  """Some related `tvshowsTvshowGenresByTvshowGenresId` exist."""
  tvshowsTvshowGenresByTvshowGenresIdExist: Boolean

  """Filter by the object’s `seasonsTvshowGenresByTvshowGenresId` relation."""
  seasonsTvshowGenresByTvshowGenresId: TvshowGenreToManySeasonsTvshowGenreFilter

  """Some related `seasonsTvshowGenresByTvshowGenresId` exist."""
  seasonsTvshowGenresByTvshowGenresIdExist: Boolean

  """
  Filter by the object’s `episodesTvshowGenresByTvshowGenresId` relation.
  """
  episodesTvshowGenresByTvshowGenresId: TvshowGenreToManyEpisodesTvshowGenreFilter

  """Some related `episodesTvshowGenresByTvshowGenresId` exist."""
  episodesTvshowGenresByTvshowGenresIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [TvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowGenreFilter!]

  """Negates the expression."""
  not: TvshowGenreFilter
}

"""An input for mutations affecting `TvshowGenre`"""
input TvshowGenreInput {
  """
  @maxLength(50)
  @notEmpty()
  """
  title: String!
  sortOrder: Int!
}

"""
Represents an update to a `TvshowGenre`. Fields that are set will be updated.
"""
input TvshowGenrePatch {
  """
  @maxLength(50)
  @notEmpty()
  """
  title: String
  sortOrder: Int
}

"""
A connection to a list of `TvshowGenre` values.
@permissions: SETTINGS_READER,SETTINGS_EDITOR,ADMIN
"""
type TvshowGenresConnection {
  """A list of `TvshowGenre` objects."""
  nodes: [TvshowGenre]!

  """
  A list of edges which contains the `TvshowGenre` and cursor to aid in pagination.
  """
  edges: [TvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowGenre` you could get from the connection."""
  totalCount: Int!
}

"""A `TvshowGenre` edge in the connection."""
type TvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowGenre` at the end of the edge."""
  node: TvshowGenre
}

"""Methods to use when ordering `TvshowGenre`."""
enum TvshowGenresOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  SORT_ORDER_ASC
  SORT_ORDER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TvshowGenreSubscriptionPayload {
  id: Int!
  tvshowGenre: TvshowGenre
  event: String
}

"""
A filter to be used against many `EpisodesTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreToManyEpisodesTvshowGenreFilter {
  """
  Every related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpisodesTvshowGenreFilter

  """
  Some related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpisodesTvshowGenreFilter

  """
  No related `EpisodesTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpisodesTvshowGenreFilter
}

"""
A filter to be used against many `SeasonsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreToManySeasonsTvshowGenreFilter {
  """
  Every related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonsTvshowGenreFilter

  """
  Some related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonsTvshowGenreFilter

  """
  No related `SeasonsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonsTvshowGenreFilter
}

"""
A filter to be used against many `TvshowsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowGenreToManyTvshowsTvshowGenreFilter {
  """
  Every related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTvshowGenreFilter

  """
  Some related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTvshowGenreFilter

  """
  No related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTvshowGenreFilter
}

enum TvshowImageType {
  COVER
  TEASER
}

"""
A filter to be used against TvshowImageType fields. All fields are combined with a logical ‘and.’
"""
input TvshowImageTypeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: TvshowImageType

  """Not equal to the specified value."""
  notEqualTo: TvshowImageType

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: TvshowImageType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: TvshowImageType

  """Included in the specified list."""
  in: [TvshowImageType!]

  """Not included in the specified list."""
  notIn: [TvshowImageType!]

  """Less than the specified value."""
  lessThan: TvshowImageType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: TvshowImageType

  """Greater than the specified value."""
  greaterThan: TvshowImageType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: TvshowImageType
}

"""An input for mutations affecting `Tvshow`"""
input TvshowInput {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String!
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
}

"""
Represents an update to a `Tvshow`. Fields that are set will be updated.
"""
input TvshowPatch {
  """
  @maxLength(100)
  @notEmpty()
  """
  title: String
  externalId: String
  originalTitle: String
  synopsis: String
  description: String
  studio: String
  released: Date
  publishStatus: PublishStatus
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type TvshowsCast implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tvshowId: Int!
  name: String!

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow
}

"""
A condition to be used against `TvshowsCast` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TvshowsCastCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `TvshowsCast` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsCastFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsCastFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsCastFilter!]

  """Negates the expression."""
  not: TvshowsCastFilter
}

"""An input for mutations affecting `TvshowsCast`"""
input TvshowsCastInput {
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `TvshowsCast`. Fields that are set will be updated.
"""
input TvshowsCastPatch {
  tvshowId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `TvshowsCast` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsCastsConnection {
  """A list of `TvshowsCast` objects."""
  nodes: [TvshowsCast]!

  """
  A list of edges which contains the `TvshowsCast` and cursor to aid in pagination.
  """
  edges: [TvshowsCastsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsCast` you could get from the connection."""
  totalCount: Int!
}

"""A `TvshowsCast` edge in the connection."""
type TvshowsCastsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsCast` at the end of the edge."""
  node: TvshowsCast
}

"""Methods to use when ordering `TvshowsCast`."""
enum TvshowsCastsOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `Tvshow` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsConnection {
  """A list of `Tvshow` objects."""
  nodes: [Tvshow]!

  """
  A list of edges which contains the `Tvshow` and cursor to aid in pagination.
  """
  edges: [TvshowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tvshow` you could get from the connection."""
  totalCount: Int!
}

"""A `Tvshow` edge in the connection."""
type TvshowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tvshow` at the end of the edge."""
  node: Tvshow
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type TvshowsImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tvshowId: Int!
  imageId: Int!
  imageType: TvshowImageType!

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow
}

"""
A condition to be used against `TvshowsImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsImageCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `imageType` field."""
  imageType: TvshowImageType
}

"""
A filter to be used against `TvshowsImage` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsImageFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Filter by the object’s `imageType` field."""
  imageType: TvshowImageTypeFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsImageFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsImageFilter!]

  """Negates the expression."""
  not: TvshowsImageFilter
}

"""An input for mutations affecting `TvshowsImage`"""
input TvshowsImageInput {
  tvshowId: Int!
  imageId: Int!
  imageType: TvshowImageType!
}

"""
Represents an update to a `TvshowsImage`. Fields that are set will be updated.
"""
input TvshowsImagePatch {
  tvshowId: Int
  imageId: Int
  imageType: TvshowImageType
}

"""
A connection to a list of `TvshowsImage` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsImagesConnection {
  """A list of `TvshowsImage` objects."""
  nodes: [TvshowsImage]!

  """
  A list of edges which contains the `TvshowsImage` and cursor to aid in pagination.
  """
  edges: [TvshowsImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsImage` you could get from the connection."""
  totalCount: Int!
}

"""A `TvshowsImage` edge in the connection."""
type TvshowsImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsImage` at the end of the edge."""
  node: TvshowsImage
}

"""Methods to use when ordering `TvshowsImage`."""
enum TvshowsImagesOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  IMAGE_TYPE_ASC
  IMAGE_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type TvshowsLicense implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tvshowId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
  createdDate: Datetime
  updatedDate: Datetime
  createdUser: String
  updatedUser: String

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow
}

"""
A condition to be used against `TvshowsLicense` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsLicenseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `licenseStart` field."""
  licenseStart: Datetime

  """Checks for equality with the object’s `licenseEnd` field."""
  licenseEnd: Datetime

  """Checks for equality with the object’s `countries` field."""
  countries: [IsoAlphaThreeCountryCodes]

  """Checks for equality with the object’s `createdDate` field."""
  createdDate: Datetime

  """Checks for equality with the object’s `updatedDate` field."""
  updatedDate: Datetime

  """Checks for equality with the object’s `createdUser` field."""
  createdUser: String

  """Checks for equality with the object’s `updatedUser` field."""
  updatedUser: String
}

"""
A filter to be used against `TvshowsLicense` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsLicenseFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `licenseStart` field."""
  licenseStart: DatetimeFilter

  """Filter by the object’s `licenseEnd` field."""
  licenseEnd: DatetimeFilter

  """Filter by the object’s `countries` field."""
  countries: IsoAlphaThreeCountryCodesListFilter

  """Filter by the object’s `createdDate` field."""
  createdDate: DatetimeFilter

  """Filter by the object’s `updatedDate` field."""
  updatedDate: DatetimeFilter

  """Filter by the object’s `createdUser` field."""
  createdUser: StringFilter

  """Filter by the object’s `updatedUser` field."""
  updatedUser: StringFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsLicenseFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsLicenseFilter!]

  """Negates the expression."""
  not: TvshowsLicenseFilter
}

"""An input for mutations affecting `TvshowsLicense`"""
input TvshowsLicenseInput {
  tvshowId: Int!
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
Represents an update to a `TvshowsLicense`. Fields that are set will be updated.
"""
input TvshowsLicensePatch {
  tvshowId: Int
  licenseStart: Datetime
  licenseEnd: Datetime
  countries: [IsoAlphaThreeCountryCodes]
}

"""
A connection to a list of `TvshowsLicense` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsLicensesConnection {
  """A list of `TvshowsLicense` objects."""
  nodes: [TvshowsLicense]!

  """
  A list of edges which contains the `TvshowsLicense` and cursor to aid in pagination.
  """
  edges: [TvshowsLicensesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsLicense` you could get from the connection."""
  totalCount: Int!
}

"""A `TvshowsLicense` edge in the connection."""
type TvshowsLicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsLicense` at the end of the edge."""
  node: TvshowsLicense
}

"""Methods to use when ordering `TvshowsLicense`."""
enum TvshowsLicensesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  LICENSE_START_ASC
  LICENSE_START_DESC
  LICENSE_END_ASC
  LICENSE_END_DESC
  COUNTRIES_ASC
  COUNTRIES_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Tvshow`."""
enum TvshowsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TITLE_ASC
  TITLE_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  ORIGINAL_TITLE_ASC
  ORIGINAL_TITLE_DESC
  SYNOPSIS_ASC
  SYNOPSIS_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  STUDIO_ASC
  STUDIO_DESC
  RELEASED_ASC
  RELEASED_DESC
  PUBLISH_STATUS_ASC
  PUBLISH_STATUS_DESC
  PUBLISHED_DATE_ASC
  PUBLISHED_DATE_DESC
  PUBLISHED_USER_ASC
  PUBLISHED_USER_DESC
  CREATED_DATE_ASC
  CREATED_DATE_DESC
  UPDATED_DATE_ASC
  UPDATED_DATE_DESC
  CREATED_USER_ASC
  CREATED_USER_DESC
  UPDATED_USER_ASC
  UPDATED_USER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A connection to a list of `TvshowsProductionCountry` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsProductionCountriesConnection {
  """A list of `TvshowsProductionCountry` objects."""
  nodes: [TvshowsProductionCountry]!

  """
  A list of edges which contains the `TvshowsProductionCountry` and cursor to aid in pagination.
  """
  edges: [TvshowsProductionCountriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TvshowsProductionCountry` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TvshowsProductionCountry` edge in the connection."""
type TvshowsProductionCountriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsProductionCountry` at the end of the edge."""
  node: TvshowsProductionCountry
}

"""Methods to use when ordering `TvshowsProductionCountry`."""
enum TvshowsProductionCountriesOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type TvshowsProductionCountry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tvshowId: Int!
  name: String!

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow
}

"""
A condition to be used against `TvshowsProductionCountry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input TvshowsProductionCountryCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `TvshowsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsProductionCountryFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsProductionCountryFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsProductionCountryFilter!]

  """Negates the expression."""
  not: TvshowsProductionCountryFilter
}

"""An input for mutations affecting `TvshowsProductionCountry`"""
input TvshowsProductionCountryInput {
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `TvshowsProductionCountry`. Fields that are set will be updated.
"""
input TvshowsProductionCountryPatch {
  tvshowId: Int

  """@notEmpty()"""
  name: String
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type TvshowsTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tvshowId: Int!
  name: String!

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow
}

"""
A condition to be used against `TvshowsTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TvshowsTagCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """
  Checks for equality with the object’s `name` field.
  @notEmpty()
  """
  name: String
}

"""
A filter to be used against `TvshowsTag` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsTagFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsTagFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsTagFilter!]

  """Negates the expression."""
  not: TvshowsTagFilter
}

"""An input for mutations affecting `TvshowsTag`"""
input TvshowsTagInput {
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""
Represents an update to a `TvshowsTag`. Fields that are set will be updated.
"""
input TvshowsTagPatch {
  tvshowId: Int

  """@notEmpty()"""
  name: String
}

"""
A connection to a list of `TvshowsTag` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsTagsConnection {
  """A list of `TvshowsTag` objects."""
  nodes: [TvshowsTag]!

  """
  A list of edges which contains the `TvshowsTag` and cursor to aid in pagination.
  """
  edges: [TvshowsTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsTag` you could get from the connection."""
  totalCount: Int!
}

"""A `TvshowsTag` edge in the connection."""
type TvshowsTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsTag` at the end of the edge."""
  node: TvshowsTag
}

"""Methods to use when ordering `TvshowsTag`."""
enum TvshowsTagsOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type TvshowsTrailer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tvshowId: Int!
  videoId: Int!

  """Reads a single `Tvshow` that is related to this `TvshowsTrailer`."""
  tvshow: Tvshow
}

"""
A condition to be used against `TvshowsTrailer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsTrailerCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `videoId` field."""
  videoId: Int
}

"""
A filter to be used against `TvshowsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsTrailerFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `videoId` field."""
  videoId: IntFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Checks for all expressions in this list."""
  and: [TvshowsTrailerFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsTrailerFilter!]

  """Negates the expression."""
  not: TvshowsTrailerFilter
}

"""An input for mutations affecting `TvshowsTrailer`"""
input TvshowsTrailerInput {
  tvshowId: Int!
  videoId: Int!
}

"""
Represents an update to a `TvshowsTrailer`. Fields that are set will be updated.
"""
input TvshowsTrailerPatch {
  tvshowId: Int
  videoId: Int
}

"""
A connection to a list of `TvshowsTrailer` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsTrailersConnection {
  """A list of `TvshowsTrailer` objects."""
  nodes: [TvshowsTrailer]!

  """
  A list of edges which contains the `TvshowsTrailer` and cursor to aid in pagination.
  """
  edges: [TvshowsTrailersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TvshowsTrailer` you could get from the connection."""
  totalCount: Int!
}

"""A `TvshowsTrailer` edge in the connection."""
type TvshowsTrailersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsTrailer` at the end of the edge."""
  node: TvshowsTrailer
}

"""Methods to use when ordering `TvshowsTrailer`."""
enum TvshowsTrailersOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  VIDEO_ID_ASC
  VIDEO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN"""
type TvshowsTvshowGenre implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tvshowId: Int!
  tvshowGenresId: Int!

  """Reads a single `Tvshow` that is related to this `TvshowsTvshowGenre`."""
  tvshow: Tvshow

  """
  Reads a single `TvshowGenre` that is related to this `TvshowsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre
}

"""
A condition to be used against `TvshowsTvshowGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TvshowsTvshowGenreCondition {
  """Checks for equality with the object’s `tvshowId` field."""
  tvshowId: Int

  """Checks for equality with the object’s `tvshowGenresId` field."""
  tvshowGenresId: Int
}

"""
A filter to be used against `TvshowsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowsTvshowGenreFilter {
  """Filter by the object’s `tvshowId` field."""
  tvshowId: IntFilter

  """Filter by the object’s `tvshowGenresId` field."""
  tvshowGenresId: IntFilter

  """Filter by the object’s `tvshow` relation."""
  tvshow: TvshowFilter

  """Filter by the object’s `tvshowGenres` relation."""
  tvshowGenres: TvshowGenreFilter

  """Checks for all expressions in this list."""
  and: [TvshowsTvshowGenreFilter!]

  """Checks for any expressions in this list."""
  or: [TvshowsTvshowGenreFilter!]

  """Negates the expression."""
  not: TvshowsTvshowGenreFilter
}

"""An input for mutations affecting `TvshowsTvshowGenre`"""
input TvshowsTvshowGenreInput {
  tvshowId: Int!
  tvshowGenresId: Int!
}

"""
Represents an update to a `TvshowsTvshowGenre`. Fields that are set will be updated.
"""
input TvshowsTvshowGenrePatch {
  tvshowId: Int
  tvshowGenresId: Int
}

"""
A connection to a list of `TvshowsTvshowGenre` values.
@permissions: TVSHOW_READER,TVSHOW_EDITOR,ADMIN
"""
type TvshowsTvshowGenresConnection {
  """A list of `TvshowsTvshowGenre` objects."""
  nodes: [TvshowsTvshowGenre]!

  """
  A list of edges which contains the `TvshowsTvshowGenre` and cursor to aid in pagination.
  """
  edges: [TvshowsTvshowGenresEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TvshowsTvshowGenre` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TvshowsTvshowGenre` edge in the connection."""
type TvshowsTvshowGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TvshowsTvshowGenre` at the end of the edge."""
  node: TvshowsTvshowGenre
}

"""Methods to use when ordering `TvshowsTvshowGenre`."""
enum TvshowsTvshowGenresOrderBy {
  NATURAL
  TVSHOW_ID_ASC
  TVSHOW_ID_DESC
  TVSHOW_GENRES_ID_ASC
  TVSHOW_GENRES_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TvshowSubscriptionPayload {
  id: Int!
  tvshow: Tvshow
  event: String
}

"""
A filter to be used against many `CollectionRelation` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyCollectionRelationFilter {
  """
  Every related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CollectionRelationFilter

  """
  Some related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CollectionRelationFilter

  """
  No related `CollectionRelation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CollectionRelationFilter
}

"""
A filter to be used against many `Season` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManySeasonFilter {
  """
  Every related `Season` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SeasonFilter

  """
  Some related `Season` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SeasonFilter

  """
  No related `Season` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SeasonFilter
}

"""
A filter to be used against many `TvshowsCast` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsCastFilter {
  """
  Every related `TvshowsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsCastFilter

  """
  Some related `TvshowsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsCastFilter

  """
  No related `TvshowsCast` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsCastFilter
}

"""
A filter to be used against many `TvshowsImage` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsImageFilter {
  """
  Every related `TvshowsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsImageFilter

  """
  Some related `TvshowsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsImageFilter

  """
  No related `TvshowsImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsImageFilter
}

"""
A filter to be used against many `TvshowsLicense` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsLicenseFilter {
  """
  Every related `TvshowsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsLicenseFilter

  """
  Some related `TvshowsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsLicenseFilter

  """
  No related `TvshowsLicense` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsLicenseFilter
}

"""
A filter to be used against many `TvshowsProductionCountry` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsProductionCountryFilter {
  """
  Every related `TvshowsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsProductionCountryFilter

  """
  Some related `TvshowsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsProductionCountryFilter

  """
  No related `TvshowsProductionCountry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsProductionCountryFilter
}

"""
A filter to be used against many `TvshowsTag` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsTagFilter {
  """
  Every related `TvshowsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTagFilter

  """
  Some related `TvshowsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTagFilter

  """
  No related `TvshowsTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTagFilter
}

"""
A filter to be used against many `TvshowsTrailer` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsTrailerFilter {
  """
  Every related `TvshowsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTrailerFilter

  """
  Some related `TvshowsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTrailerFilter

  """
  No related `TvshowsTrailer` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTrailerFilter
}

"""
A filter to be used against many `TvshowsTvshowGenre` object types. All fields are combined with a logical ‘and.’
"""
input TvshowToManyTvshowsTvshowGenreFilter {
  """
  Every related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TvshowsTvshowGenreFilter

  """
  Some related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TvshowsTvshowGenreFilter

  """
  No related `TvshowsTvshowGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TvshowsTvshowGenreFilter
}

"""
All input for the `updateAutomaticCollectionsFilterByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateAutomaticCollectionsFilterByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AutomaticCollectionsFilter` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AutomaticCollectionsFilter` being updated.
  """
  patch: AutomaticCollectionsFilterPatch!
}

"""
All input for the `updateAutomaticCollectionsFilter` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateAutomaticCollectionsFilterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AutomaticCollectionsFilter` being updated.
  """
  patch: AutomaticCollectionsFilterPatch!
  id: Int!
}

"""The output of our update `AutomaticCollectionsFilter` mutation."""
type UpdateAutomaticCollectionsFilterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AutomaticCollectionsFilter` that was updated by this mutation."""
  automaticCollectionsFilter: AutomaticCollectionsFilter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `AutomaticCollectionsFilter`.
  """
  collection: Collection

  """An edge for our `AutomaticCollectionsFilter`. May be used by Relay 1."""
  automaticCollectionsFilterEdge(
    """The method to use when ordering `AutomaticCollectionsFilter`."""
    orderBy: [AutomaticCollectionsFiltersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AutomaticCollectionsFiltersEdge
}

"""
All input for the `updateCollectionByExternalId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  externalId: String!
}

"""
All input for the `updateCollectionByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Collection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
}

"""
All input for the `updateCollection` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Collection` being updated.
  """
  patch: CollectionPatch!
  id: Int!
}

"""The output of our update `Collection` mutation."""
type UpdateCollectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Collection` that was updated by this mutation."""
  collection: Collection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Collection`. May be used by Relay 1."""
  collectionEdge(
    """The method to use when ordering `Collection`."""
    orderBy: [CollectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsEdge
}

"""
All input for the `updateCollectionRelationByCollectionIdAndEpisodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionRelationByCollectionIdAndEpisodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionRelation` being updated.
  """
  patch: CollectionRelationPatch!
  collectionId: Int!
  episodeId: Int!
}

"""
All input for the `updateCollectionRelationByCollectionIdAndMovieId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionRelationByCollectionIdAndMovieIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionRelation` being updated.
  """
  patch: CollectionRelationPatch!
  collectionId: Int!
  movieId: Int!
}

"""
All input for the `updateCollectionRelationByCollectionIdAndSeasonId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionRelationByCollectionIdAndSeasonIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionRelation` being updated.
  """
  patch: CollectionRelationPatch!
  collectionId: Int!
  seasonId: Int!
}

"""
All input for the `updateCollectionRelationByCollectionIdAndTvshowId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionRelationByCollectionIdAndTvshowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionRelation` being updated.
  """
  patch: CollectionRelationPatch!
  collectionId: Int!
  tvshowId: Int!
}

"""
All input for the `updateCollectionRelationByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionRelationByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionRelation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionRelation` being updated.
  """
  patch: CollectionRelationPatch!
}

"""
All input for the `updateCollectionRelation` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionRelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionRelation` being updated.
  """
  patch: CollectionRelationPatch!
  id: Int!
}

"""The output of our update `CollectionRelation` mutation."""
type UpdateCollectionRelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionRelation` that was updated by this mutation."""
  collectionRelation: CollectionRelation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionRelation`.
  """
  collection: Collection

  """Reads a single `Movie` that is related to this `CollectionRelation`."""
  movie: Movie

  """Reads a single `Tvshow` that is related to this `CollectionRelation`."""
  tvshow: Tvshow

  """Reads a single `Season` that is related to this `CollectionRelation`."""
  season: Season

  """Reads a single `Episode` that is related to this `CollectionRelation`."""
  episode: Episode

  """An edge for our `CollectionRelation`. May be used by Relay 1."""
  collectionRelationEdge(
    """The method to use when ordering `CollectionRelation`."""
    orderBy: [CollectionRelationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionRelationsEdge
}

"""
All input for the `updateCollectionsImageByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionsImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionsImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionsImage` being updated.
  """
  patch: CollectionsImagePatch!
}

"""
All input for the `updateCollectionsImage` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionsImage` being updated.
  """
  patch: CollectionsImagePatch!
  collectionId: Int!
  imageId: Int!
  imageType: CollectionImageType!
}

"""The output of our update `CollectionsImage` mutation."""
type UpdateCollectionsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsImage` that was updated by this mutation."""
  collectionsImage: CollectionsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Collection` that is related to this `CollectionsImage`.
  """
  collection: Collection

  """An edge for our `CollectionsImage`. May be used by Relay 1."""
  collectionsImageEdge(
    """The method to use when ordering `CollectionsImage`."""
    orderBy: [CollectionsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsImagesEdge
}

"""
All input for the `updateCollectionsTagByNodeId` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionsTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CollectionsTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CollectionsTag` being updated.
  """
  patch: CollectionsTagPatch!
}

"""
All input for the `updateCollectionsTag` mutation.
@permissions: COLLECTION_EDITOR,ADMIN
"""
input UpdateCollectionsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CollectionsTag` being updated.
  """
  patch: CollectionsTagPatch!
  collectionId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `CollectionsTag` mutation."""
type UpdateCollectionsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CollectionsTag` that was updated by this mutation."""
  collectionsTag: CollectionsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Collection` that is related to this `CollectionsTag`."""
  collection: Collection

  """An edge for our `CollectionsTag`. May be used by Relay 1."""
  collectionsTagEdge(
    """The method to use when ordering `CollectionsTag`."""
    orderBy: [CollectionsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CollectionsTagsEdge
}

"""
All input for the `updateEpisodeByExternalId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodeByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Episode` being updated.
  """
  patch: EpisodePatch!
  externalId: String!
}

"""
All input for the `updateEpisodeByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Episode` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Episode` being updated.
  """
  patch: EpisodePatch!
}

"""
All input for the `updateEpisode` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Episode` being updated.
  """
  patch: EpisodePatch!
  id: Int!
}

"""The output of our update `Episode` mutation."""
type UpdateEpisodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Episode` that was updated by this mutation."""
  episode: Episode

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `Episode`."""
  season: Season

  """An edge for our `Episode`. May be used by Relay 1."""
  episodeEdge(
    """The method to use when ordering `Episode`."""
    orderBy: [EpisodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesEdge
}

"""
All input for the `updateEpisodesCastByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesCast` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EpisodesCast` being updated.
  """
  patch: EpisodesCastPatch!
}

"""
All input for the `updateEpisodesCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesCast` being updated.
  """
  patch: EpisodesCastPatch!
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `EpisodesCast` mutation."""
type UpdateEpisodesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesCast` that was updated by this mutation."""
  episodesCast: EpisodesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesCast`."""
  episode: Episode

  """An edge for our `EpisodesCast`. May be used by Relay 1."""
  episodesCastEdge(
    """The method to use when ordering `EpisodesCast`."""
    orderBy: [EpisodesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesCastsEdge
}

"""
All input for the `updateEpisodesImageByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EpisodesImage` being updated.
  """
  patch: EpisodesImagePatch!
}

"""
All input for the `updateEpisodesImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesImage` being updated.
  """
  patch: EpisodesImagePatch!
  episodeId: Int!
  imageId: Int!
  imageType: EpisodeImageType!
}

"""The output of our update `EpisodesImage` mutation."""
type UpdateEpisodesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesImage` that was updated by this mutation."""
  episodesImage: EpisodesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesImage`."""
  episode: Episode

  """An edge for our `EpisodesImage`. May be used by Relay 1."""
  episodesImageEdge(
    """The method to use when ordering `EpisodesImage`."""
    orderBy: [EpisodesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesImagesEdge
}

"""
All input for the `updateEpisodesLicenseByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesLicense` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EpisodesLicense` being updated.
  """
  patch: EpisodesLicensePatch!
}

"""
All input for the `updateEpisodesLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesLicense` being updated.
  """
  patch: EpisodesLicensePatch!
  id: Int!
}

"""The output of our update `EpisodesLicense` mutation."""
type UpdateEpisodesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesLicense` that was updated by this mutation."""
  episodesLicense: EpisodesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesLicense`."""
  episode: Episode

  """An edge for our `EpisodesLicense`. May be used by Relay 1."""
  episodesLicenseEdge(
    """The method to use when ordering `EpisodesLicense`."""
    orderBy: [EpisodesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesLicensesEdge
}

"""
All input for the `updateEpisodesProductionCountryByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesProductionCountry` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EpisodesProductionCountry` being updated.
  """
  patch: EpisodesProductionCountryPatch!
}

"""
All input for the `updateEpisodesProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesProductionCountry` being updated.
  """
  patch: EpisodesProductionCountryPatch!
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `EpisodesProductionCountry` mutation."""
type UpdateEpisodesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesProductionCountry` that was updated by this mutation."""
  episodesProductionCountry: EpisodesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesProductionCountry`.
  """
  episode: Episode

  """An edge for our `EpisodesProductionCountry`. May be used by Relay 1."""
  episodesProductionCountryEdge(
    """The method to use when ordering `EpisodesProductionCountry`."""
    orderBy: [EpisodesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesProductionCountriesEdge
}

"""
All input for the `updateEpisodesTagByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EpisodesTag` being updated.
  """
  patch: EpisodesTagPatch!
}

"""
All input for the `updateEpisodesTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesTag` being updated.
  """
  patch: EpisodesTagPatch!
  episodeId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `EpisodesTag` mutation."""
type UpdateEpisodesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTag` that was updated by this mutation."""
  episodesTag: EpisodesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTag`."""
  episode: Episode

  """An edge for our `EpisodesTag`. May be used by Relay 1."""
  episodesTagEdge(
    """The method to use when ordering `EpisodesTag`."""
    orderBy: [EpisodesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTagsEdge
}

"""
All input for the `updateEpisodesTrailerByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesTrailer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EpisodesTrailer` being updated.
  """
  patch: EpisodesTrailerPatch!
}

"""
All input for the `updateEpisodesTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesTrailer` being updated.
  """
  patch: EpisodesTrailerPatch!
  episodeId: Int!
  videoId: Int!
}

"""The output of our update `EpisodesTrailer` mutation."""
type UpdateEpisodesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTrailer` that was updated by this mutation."""
  episodesTrailer: EpisodesTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Episode` that is related to this `EpisodesTrailer`."""
  episode: Episode

  """An edge for our `EpisodesTrailer`. May be used by Relay 1."""
  episodesTrailerEdge(
    """The method to use when ordering `EpisodesTrailer`."""
    orderBy: [EpisodesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTrailersEdge
}

"""
All input for the `updateEpisodesTvshowGenreByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EpisodesTvshowGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EpisodesTvshowGenre` being updated.
  """
  patch: EpisodesTvshowGenrePatch!
}

"""
All input for the `updateEpisodesTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateEpisodesTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EpisodesTvshowGenre` being updated.
  """
  patch: EpisodesTvshowGenrePatch!
  episodeId: Int!
  tvshowGenresId: Int!
}

"""The output of our update `EpisodesTvshowGenre` mutation."""
type UpdateEpisodesTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EpisodesTvshowGenre` that was updated by this mutation."""
  episodesTvshowGenre: EpisodesTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Episode` that is related to this `EpisodesTvshowGenre`.
  """
  episode: Episode

  """
  Reads a single `TvshowGenre` that is related to this `EpisodesTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `EpisodesTvshowGenre`. May be used by Relay 1."""
  episodesTvshowGenreEdge(
    """The method to use when ordering `EpisodesTvshowGenre`."""
    orderBy: [EpisodesTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): EpisodesTvshowGenresEdge
}

"""
All input for the `updateMovieByExternalId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMovieByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Movie` being updated.
  """
  patch: MoviePatch!
  externalId: String!
}

"""
All input for the `updateMovieByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMovieByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Movie` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Movie` being updated.
  """
  patch: MoviePatch!
}

"""
All input for the `updateMovieGenreByNodeId` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input UpdateMovieGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MovieGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MovieGenre` being updated.
  """
  patch: MovieGenrePatch!
}

"""
All input for the `updateMovieGenre` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input UpdateMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MovieGenre` being updated.
  """
  patch: MovieGenrePatch!
  id: Int!
}

"""The output of our update `MovieGenre` mutation."""
type UpdateMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MovieGenre` that was updated by this mutation."""
  movieGenre: MovieGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MovieGenre`. May be used by Relay 1."""
  movieGenreEdge(
    """The method to use when ordering `MovieGenre`."""
    orderBy: [MovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MovieGenresEdge
}

"""
All input for the `updateMovie` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMovieInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Movie` being updated.
  """
  patch: MoviePatch!
  id: Int!
}

"""The output of our update `Movie` mutation."""
type UpdateMoviePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Movie` that was updated by this mutation."""
  movie: Movie

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Movie`. May be used by Relay 1."""
  movieEdge(
    """The method to use when ordering `Movie`."""
    orderBy: [MoviesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesEdge
}

"""
All input for the `updateMoviesCastByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesCast` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MoviesCast` being updated.
  """
  patch: MoviesCastPatch!
}

"""
All input for the `updateMoviesCast` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesCast` being updated.
  """
  patch: MoviesCastPatch!
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `MoviesCast` mutation."""
type UpdateMoviesCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesCast` that was updated by this mutation."""
  moviesCast: MoviesCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesCast`."""
  movie: Movie

  """An edge for our `MoviesCast`. May be used by Relay 1."""
  moviesCastEdge(
    """The method to use when ordering `MoviesCast`."""
    orderBy: [MoviesCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesCastsEdge
}

"""
All input for the `updateMoviesImageByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MoviesImage` being updated.
  """
  patch: MoviesImagePatch!
}

"""
All input for the `updateMoviesImage` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesImage` being updated.
  """
  patch: MoviesImagePatch!
  movieId: Int!
  imageId: Int!
  imageType: MovieImageType!
}

"""The output of our update `MoviesImage` mutation."""
type UpdateMoviesImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesImage` that was updated by this mutation."""
  moviesImage: MoviesImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesImage`."""
  movie: Movie

  """An edge for our `MoviesImage`. May be used by Relay 1."""
  moviesImageEdge(
    """The method to use when ordering `MoviesImage`."""
    orderBy: [MoviesImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesImagesEdge
}

"""
All input for the `updateMoviesLicenseByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesLicense` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MoviesLicense` being updated.
  """
  patch: MoviesLicensePatch!
}

"""
All input for the `updateMoviesLicense` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesLicense` being updated.
  """
  patch: MoviesLicensePatch!
  id: Int!
}

"""The output of our update `MoviesLicense` mutation."""
type UpdateMoviesLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesLicense` that was updated by this mutation."""
  moviesLicense: MoviesLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesLicense`."""
  movie: Movie

  """An edge for our `MoviesLicense`. May be used by Relay 1."""
  moviesLicenseEdge(
    """The method to use when ordering `MoviesLicense`."""
    orderBy: [MoviesLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesLicensesEdge
}

"""
All input for the `updateMoviesMovieGenreByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesMovieGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesMovieGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MoviesMovieGenre` being updated.
  """
  patch: MoviesMovieGenrePatch!
}

"""
All input for the `updateMoviesMovieGenre` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesMovieGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesMovieGenre` being updated.
  """
  patch: MoviesMovieGenrePatch!
  movieId: Int!
  movieGenresId: Int!
}

"""The output of our update `MoviesMovieGenre` mutation."""
type UpdateMoviesMovieGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesMovieGenre` that was updated by this mutation."""
  moviesMovieGenre: MoviesMovieGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesMovieGenre`."""
  movie: Movie

  """
  Reads a single `MovieGenre` that is related to this `MoviesMovieGenre`.
  """
  movieGenres: MovieGenre

  """An edge for our `MoviesMovieGenre`. May be used by Relay 1."""
  moviesMovieGenreEdge(
    """The method to use when ordering `MoviesMovieGenre`."""
    orderBy: [MoviesMovieGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesMovieGenresEdge
}

"""
All input for the `updateMoviesProductionCountryByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesProductionCountry` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MoviesProductionCountry` being updated.
  """
  patch: MoviesProductionCountryPatch!
}

"""
All input for the `updateMoviesProductionCountry` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesProductionCountry` being updated.
  """
  patch: MoviesProductionCountryPatch!
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `MoviesProductionCountry` mutation."""
type UpdateMoviesProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesProductionCountry` that was updated by this mutation."""
  moviesProductionCountry: MoviesProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Movie` that is related to this `MoviesProductionCountry`.
  """
  movie: Movie

  """An edge for our `MoviesProductionCountry`. May be used by Relay 1."""
  moviesProductionCountryEdge(
    """The method to use when ordering `MoviesProductionCountry`."""
    orderBy: [MoviesProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesProductionCountriesEdge
}

"""
All input for the `updateMoviesTagByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MoviesTag` being updated.
  """
  patch: MoviesTagPatch!
}

"""
All input for the `updateMoviesTag` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesTag` being updated.
  """
  patch: MoviesTagPatch!
  movieId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `MoviesTag` mutation."""
type UpdateMoviesTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTag` that was updated by this mutation."""
  moviesTag: MoviesTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTag`."""
  movie: Movie

  """An edge for our `MoviesTag`. May be used by Relay 1."""
  moviesTagEdge(
    """The method to use when ordering `MoviesTag`."""
    orderBy: [MoviesTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTagsEdge
}

"""
All input for the `updateMoviesTrailerByNodeId` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MoviesTrailer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MoviesTrailer` being updated.
  """
  patch: MoviesTrailerPatch!
}

"""
All input for the `updateMoviesTrailer` mutation.
@permissions: MOVIE_EDITOR,ADMIN
"""
input UpdateMoviesTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MoviesTrailer` being updated.
  """
  patch: MoviesTrailerPatch!
  movieId: Int!
  videoId: Int!
}

"""The output of our update `MoviesTrailer` mutation."""
type UpdateMoviesTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MoviesTrailer` that was updated by this mutation."""
  moviesTrailer: MoviesTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Movie` that is related to this `MoviesTrailer`."""
  movie: Movie

  """An edge for our `MoviesTrailer`. May be used by Relay 1."""
  moviesTrailerEdge(
    """The method to use when ordering `MoviesTrailer`."""
    orderBy: [MoviesTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MoviesTrailersEdge
}

"""
All input for the `updateSeasonByExternalId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Season` being updated.
  """
  patch: SeasonPatch!
  externalId: String!
}

"""
All input for the `updateSeasonByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Season` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Season` being updated.
  """
  patch: SeasonPatch!
}

"""
All input for the `updateSeason` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Season` being updated.
  """
  patch: SeasonPatch!
  id: Int!
}

"""The output of our update `Season` mutation."""
type UpdateSeasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Season` that was updated by this mutation."""
  season: Season

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `Season`."""
  tvshow: Tvshow

  """An edge for our `Season`. May be used by Relay 1."""
  seasonEdge(
    """The method to use when ordering `Season`."""
    orderBy: [SeasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsEdge
}

"""
All input for the `updateSeasonsCastByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsCast` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SeasonsCast` being updated.
  """
  patch: SeasonsCastPatch!
}

"""
All input for the `updateSeasonsCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsCast` being updated.
  """
  patch: SeasonsCastPatch!
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `SeasonsCast` mutation."""
type UpdateSeasonsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsCast` that was updated by this mutation."""
  seasonsCast: SeasonsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsCast`."""
  season: Season

  """An edge for our `SeasonsCast`. May be used by Relay 1."""
  seasonsCastEdge(
    """The method to use when ordering `SeasonsCast`."""
    orderBy: [SeasonsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsCastsEdge
}

"""
All input for the `updateSeasonsImageByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SeasonsImage` being updated.
  """
  patch: SeasonsImagePatch!
}

"""
All input for the `updateSeasonsImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsImage` being updated.
  """
  patch: SeasonsImagePatch!
  seasonId: Int!
  imageId: Int!
  imageType: SeasonImageType!
}

"""The output of our update `SeasonsImage` mutation."""
type UpdateSeasonsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsImage` that was updated by this mutation."""
  seasonsImage: SeasonsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsImage`."""
  season: Season

  """An edge for our `SeasonsImage`. May be used by Relay 1."""
  seasonsImageEdge(
    """The method to use when ordering `SeasonsImage`."""
    orderBy: [SeasonsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsImagesEdge
}

"""
All input for the `updateSeasonsLicenseByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsLicense` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SeasonsLicense` being updated.
  """
  patch: SeasonsLicensePatch!
}

"""
All input for the `updateSeasonsLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsLicense` being updated.
  """
  patch: SeasonsLicensePatch!
  id: Int!
}

"""The output of our update `SeasonsLicense` mutation."""
type UpdateSeasonsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsLicense` that was updated by this mutation."""
  seasonsLicense: SeasonsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsLicense`."""
  season: Season

  """An edge for our `SeasonsLicense`. May be used by Relay 1."""
  seasonsLicenseEdge(
    """The method to use when ordering `SeasonsLicense`."""
    orderBy: [SeasonsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsLicensesEdge
}

"""
All input for the `updateSeasonsProductionCountryByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsProductionCountry` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SeasonsProductionCountry` being updated.
  """
  patch: SeasonsProductionCountryPatch!
}

"""
All input for the `updateSeasonsProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsProductionCountry` being updated.
  """
  patch: SeasonsProductionCountryPatch!
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `SeasonsProductionCountry` mutation."""
type UpdateSeasonsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsProductionCountry` that was updated by this mutation."""
  seasonsProductionCountry: SeasonsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Season` that is related to this `SeasonsProductionCountry`.
  """
  season: Season

  """An edge for our `SeasonsProductionCountry`. May be used by Relay 1."""
  seasonsProductionCountryEdge(
    """The method to use when ordering `SeasonsProductionCountry`."""
    orderBy: [SeasonsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsProductionCountriesEdge
}

"""
All input for the `updateSeasonsTagByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SeasonsTag` being updated.
  """
  patch: SeasonsTagPatch!
}

"""
All input for the `updateSeasonsTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsTag` being updated.
  """
  patch: SeasonsTagPatch!
  seasonId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `SeasonsTag` mutation."""
type UpdateSeasonsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTag` that was updated by this mutation."""
  seasonsTag: SeasonsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTag`."""
  season: Season

  """An edge for our `SeasonsTag`. May be used by Relay 1."""
  seasonsTagEdge(
    """The method to use when ordering `SeasonsTag`."""
    orderBy: [SeasonsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTagsEdge
}

"""
All input for the `updateSeasonsTrailerByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsTrailer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SeasonsTrailer` being updated.
  """
  patch: SeasonsTrailerPatch!
}

"""
All input for the `updateSeasonsTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsTrailer` being updated.
  """
  patch: SeasonsTrailerPatch!
  seasonId: Int!
  videoId: Int!
}

"""The output of our update `SeasonsTrailer` mutation."""
type UpdateSeasonsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTrailer` that was updated by this mutation."""
  seasonsTrailer: SeasonsTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTrailer`."""
  season: Season

  """An edge for our `SeasonsTrailer`. May be used by Relay 1."""
  seasonsTrailerEdge(
    """The method to use when ordering `SeasonsTrailer`."""
    orderBy: [SeasonsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTrailersEdge
}

"""
All input for the `updateSeasonsTvshowGenreByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SeasonsTvshowGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SeasonsTvshowGenre` being updated.
  """
  patch: SeasonsTvshowGenrePatch!
}

"""
All input for the `updateSeasonsTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateSeasonsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SeasonsTvshowGenre` being updated.
  """
  patch: SeasonsTvshowGenrePatch!
  seasonId: Int!
  tvshowGenresId: Int!
}

"""The output of our update `SeasonsTvshowGenre` mutation."""
type UpdateSeasonsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SeasonsTvshowGenre` that was updated by this mutation."""
  seasonsTvshowGenre: SeasonsTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Season` that is related to this `SeasonsTvshowGenre`."""
  season: Season

  """
  Reads a single `TvshowGenre` that is related to this `SeasonsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `SeasonsTvshowGenre`. May be used by Relay 1."""
  seasonsTvshowGenreEdge(
    """The method to use when ordering `SeasonsTvshowGenre`."""
    orderBy: [SeasonsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): SeasonsTvshowGenresEdge
}

"""
All input for the `updateTvshowByExternalId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowByExternalIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tvshow` being updated.
  """
  patch: TvshowPatch!
  externalId: String!
}

"""
All input for the `updateTvshowByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tvshow` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tvshow` being updated.
  """
  patch: TvshowPatch!
}

"""
All input for the `updateTvshowGenreByNodeId` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input UpdateTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowGenre` being updated.
  """
  patch: TvshowGenrePatch!
}

"""
All input for the `updateTvshowGenre` mutation.
@permissions: SETTINGS_EDITOR,ADMIN
"""
input UpdateTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowGenre` being updated.
  """
  patch: TvshowGenrePatch!
  id: Int!
}

"""The output of our update `TvshowGenre` mutation."""
type UpdateTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowGenre` that was updated by this mutation."""
  tvshowGenre: TvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TvshowGenre`. May be used by Relay 1."""
  tvshowGenreEdge(
    """The method to use when ordering `TvshowGenre`."""
    orderBy: [TvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowGenresEdge
}

"""
All input for the `updateTvshow` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Tvshow` being updated.
  """
  patch: TvshowPatch!
  id: Int!
}

"""The output of our update `Tvshow` mutation."""
type UpdateTvshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Tvshow` that was updated by this mutation."""
  tvshow: Tvshow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Tvshow`. May be used by Relay 1."""
  tvshowEdge(
    """The method to use when ordering `Tvshow`."""
    orderBy: [TvshowsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsEdge
}

"""
All input for the `updateTvshowsCastByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsCastByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsCast` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowsCast` being updated.
  """
  patch: TvshowsCastPatch!
}

"""
All input for the `updateTvshowsCast` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsCastInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsCast` being updated.
  """
  patch: TvshowsCastPatch!
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `TvshowsCast` mutation."""
type UpdateTvshowsCastPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsCast` that was updated by this mutation."""
  tvshowsCast: TvshowsCast

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsCast`."""
  tvshow: Tvshow

  """An edge for our `TvshowsCast`. May be used by Relay 1."""
  tvshowsCastEdge(
    """The method to use when ordering `TvshowsCast`."""
    orderBy: [TvshowsCastsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsCastsEdge
}

"""
All input for the `updateTvshowsImageByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowsImage` being updated.
  """
  patch: TvshowsImagePatch!
}

"""
All input for the `updateTvshowsImage` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsImage` being updated.
  """
  patch: TvshowsImagePatch!
  tvshowId: Int!
  imageId: Int!
  imageType: TvshowImageType!
}

"""The output of our update `TvshowsImage` mutation."""
type UpdateTvshowsImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsImage` that was updated by this mutation."""
  tvshowsImage: TvshowsImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsImage`."""
  tvshow: Tvshow

  """An edge for our `TvshowsImage`. May be used by Relay 1."""
  tvshowsImageEdge(
    """The method to use when ordering `TvshowsImage`."""
    orderBy: [TvshowsImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsImagesEdge
}

"""
All input for the `updateTvshowsLicenseByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsLicenseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsLicense` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowsLicense` being updated.
  """
  patch: TvshowsLicensePatch!
}

"""
All input for the `updateTvshowsLicense` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsLicenseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsLicense` being updated.
  """
  patch: TvshowsLicensePatch!
  id: Int!
}

"""The output of our update `TvshowsLicense` mutation."""
type UpdateTvshowsLicensePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsLicense` that was updated by this mutation."""
  tvshowsLicense: TvshowsLicense

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsLicense`."""
  tvshow: Tvshow

  """An edge for our `TvshowsLicense`. May be used by Relay 1."""
  tvshowsLicenseEdge(
    """The method to use when ordering `TvshowsLicense`."""
    orderBy: [TvshowsLicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsLicensesEdge
}

"""
All input for the `updateTvshowsProductionCountryByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsProductionCountryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsProductionCountry` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowsProductionCountry` being updated.
  """
  patch: TvshowsProductionCountryPatch!
}

"""
All input for the `updateTvshowsProductionCountry` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsProductionCountryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsProductionCountry` being updated.
  """
  patch: TvshowsProductionCountryPatch!
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `TvshowsProductionCountry` mutation."""
type UpdateTvshowsProductionCountryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsProductionCountry` that was updated by this mutation."""
  tvshowsProductionCountry: TvshowsProductionCountry

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Tvshow` that is related to this `TvshowsProductionCountry`.
  """
  tvshow: Tvshow

  """An edge for our `TvshowsProductionCountry`. May be used by Relay 1."""
  tvshowsProductionCountryEdge(
    """The method to use when ordering `TvshowsProductionCountry`."""
    orderBy: [TvshowsProductionCountriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsProductionCountriesEdge
}

"""
All input for the `updateTvshowsTagByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowsTag` being updated.
  """
  patch: TvshowsTagPatch!
}

"""
All input for the `updateTvshowsTag` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsTag` being updated.
  """
  patch: TvshowsTagPatch!
  tvshowId: Int!

  """@notEmpty()"""
  name: String!
}

"""The output of our update `TvshowsTag` mutation."""
type UpdateTvshowsTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTag` that was updated by this mutation."""
  tvshowsTag: TvshowsTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTag`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTag`. May be used by Relay 1."""
  tvshowsTagEdge(
    """The method to use when ordering `TvshowsTag`."""
    orderBy: [TvshowsTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTagsEdge
}

"""
All input for the `updateTvshowsTrailerByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsTrailerByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsTrailer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowsTrailer` being updated.
  """
  patch: TvshowsTrailerPatch!
}

"""
All input for the `updateTvshowsTrailer` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsTrailerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsTrailer` being updated.
  """
  patch: TvshowsTrailerPatch!
  tvshowId: Int!
  videoId: Int!
}

"""The output of our update `TvshowsTrailer` mutation."""
type UpdateTvshowsTrailerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTrailer` that was updated by this mutation."""
  tvshowsTrailer: TvshowsTrailer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTrailer`."""
  tvshow: Tvshow

  """An edge for our `TvshowsTrailer`. May be used by Relay 1."""
  tvshowsTrailerEdge(
    """The method to use when ordering `TvshowsTrailer`."""
    orderBy: [TvshowsTrailersOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTrailersEdge
}

"""
All input for the `updateTvshowsTvshowGenreByNodeId` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsTvshowGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TvshowsTvshowGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TvshowsTvshowGenre` being updated.
  """
  patch: TvshowsTvshowGenrePatch!
}

"""
All input for the `updateTvshowsTvshowGenre` mutation.
@permissions: TVSHOW_EDITOR,ADMIN
"""
input UpdateTvshowsTvshowGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TvshowsTvshowGenre` being updated.
  """
  patch: TvshowsTvshowGenrePatch!
  tvshowId: Int!
  tvshowGenresId: Int!
}

"""The output of our update `TvshowsTvshowGenre` mutation."""
type UpdateTvshowsTvshowGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TvshowsTvshowGenre` that was updated by this mutation."""
  tvshowsTvshowGenre: TvshowsTvshowGenre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tvshow` that is related to this `TvshowsTvshowGenre`."""
  tvshow: Tvshow

  """
  Reads a single `TvshowGenre` that is related to this `TvshowsTvshowGenre`.
  """
  tvshowGenres: TvshowGenre

  """An edge for our `TvshowsTvshowGenre`. May be used by Relay 1."""
  tvshowsTvshowGenreEdge(
    """The method to use when ordering `TvshowsTvshowGenre`."""
    orderBy: [TvshowsTvshowGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): TvshowsTvshowGenresEdge
}
